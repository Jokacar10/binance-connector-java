/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.model;

import com.binance.connector.client.simple_earn.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** GetRwusdQuotaDetailsResponseStandardRedemptionQuota */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetRwusdQuotaDetailsResponseStandardRedemptionQuota {
    public static final String SERIALIZED_NAME_LEFT_QUOTA = "leftQuota";

    @SerializedName(SERIALIZED_NAME_LEFT_QUOTA)
    @jakarta.annotation.Nullable
    private String leftQuota;

    public static final String SERIALIZED_NAME_MINIMUM = "minimum";

    @SerializedName(SERIALIZED_NAME_MINIMUM)
    @jakarta.annotation.Nullable
    private String minimum;

    public static final String SERIALIZED_NAME_FEE = "fee";

    @SerializedName(SERIALIZED_NAME_FEE)
    @jakarta.annotation.Nullable
    private String fee;

    public static final String SERIALIZED_NAME_REDEEM_PERIOD = "redeemPeriod";

    @SerializedName(SERIALIZED_NAME_REDEEM_PERIOD)
    @jakarta.annotation.Nullable
    private Long redeemPeriod;

    public GetRwusdQuotaDetailsResponseStandardRedemptionQuota() {}

    public GetRwusdQuotaDetailsResponseStandardRedemptionQuota leftQuota(
            @jakarta.annotation.Nullable String leftQuota) {
        this.leftQuota = leftQuota;
        return this;
    }

    /**
     * Get leftQuota
     *
     * @return leftQuota
     */
    @jakarta.annotation.Nullable
    public String getLeftQuota() {
        return leftQuota;
    }

    public void setLeftQuota(@jakarta.annotation.Nullable String leftQuota) {
        this.leftQuota = leftQuota;
    }

    public GetRwusdQuotaDetailsResponseStandardRedemptionQuota minimum(
            @jakarta.annotation.Nullable String minimum) {
        this.minimum = minimum;
        return this;
    }

    /**
     * Get minimum
     *
     * @return minimum
     */
    @jakarta.annotation.Nullable
    public String getMinimum() {
        return minimum;
    }

    public void setMinimum(@jakarta.annotation.Nullable String minimum) {
        this.minimum = minimum;
    }

    public GetRwusdQuotaDetailsResponseStandardRedemptionQuota fee(
            @jakarta.annotation.Nullable String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Get fee
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    public String getFee() {
        return fee;
    }

    public void setFee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
    }

    public GetRwusdQuotaDetailsResponseStandardRedemptionQuota redeemPeriod(
            @jakarta.annotation.Nullable Long redeemPeriod) {
        this.redeemPeriod = redeemPeriod;
        return this;
    }

    /**
     * Get redeemPeriod
     *
     * @return redeemPeriod
     */
    @jakarta.annotation.Nullable
    public Long getRedeemPeriod() {
        return redeemPeriod;
    }

    public void setRedeemPeriod(@jakarta.annotation.Nullable Long redeemPeriod) {
        this.redeemPeriod = redeemPeriod;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRwusdQuotaDetailsResponseStandardRedemptionQuota
                getRwusdQuotaDetailsResponseStandardRedemptionQuota =
                        (GetRwusdQuotaDetailsResponseStandardRedemptionQuota) o;
        return Objects.equals(
                        this.leftQuota,
                        getRwusdQuotaDetailsResponseStandardRedemptionQuota.leftQuota)
                && Objects.equals(
                        this.minimum, getRwusdQuotaDetailsResponseStandardRedemptionQuota.minimum)
                && Objects.equals(this.fee, getRwusdQuotaDetailsResponseStandardRedemptionQuota.fee)
                && Objects.equals(
                        this.redeemPeriod,
                        getRwusdQuotaDetailsResponseStandardRedemptionQuota.redeemPeriod);
    }

    @Override
    public int hashCode() {
        return Objects.hash(leftQuota, minimum, fee, redeemPeriod);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetRwusdQuotaDetailsResponseStandardRedemptionQuota {\n");
        sb.append("		leftQuota: ").append(toIndentedString(leftQuota)).append("\n");
        sb.append("		minimum: ").append(toIndentedString(minimum)).append("\n");
        sb.append("		fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("		redeemPeriod: ").append(toIndentedString(redeemPeriod)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object leftQuotaValue = getLeftQuota();
        String leftQuotaValueAsString = "";
        leftQuotaValueAsString = leftQuotaValue.toString();
        sb.append("leftQuota=").append(urlEncode(leftQuotaValueAsString)).append("");
        Object minimumValue = getMinimum();
        String minimumValueAsString = "";
        minimumValueAsString = minimumValue.toString();
        sb.append("minimum=").append(urlEncode(minimumValueAsString)).append("");
        Object feeValue = getFee();
        String feeValueAsString = "";
        feeValueAsString = feeValue.toString();
        sb.append("fee=").append(urlEncode(feeValueAsString)).append("");
        Object redeemPeriodValue = getRedeemPeriod();
        String redeemPeriodValueAsString = "";
        redeemPeriodValueAsString = redeemPeriodValue.toString();
        sb.append("redeemPeriod=").append(urlEncode(redeemPeriodValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("leftQuota");
        openapiFields.add("minimum");
        openapiFields.add("fee");
        openapiFields.add("redeemPeriod");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetRwusdQuotaDetailsResponseStandardRedemptionQuota
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetRwusdQuotaDetailsResponseStandardRedemptionQuota.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetRwusdQuotaDetailsResponseStandardRedemptionQuota is not"
                                    + " found in the empty JSON string",
                                GetRwusdQuotaDetailsResponseStandardRedemptionQuota
                                        .openapiRequiredFields
                                        .toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("leftQuota") != null && !jsonObj.get("leftQuota").isJsonNull())
                && !jsonObj.get("leftQuota").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `leftQuota` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("leftQuota").toString()));
        }
        if ((jsonObj.get("minimum") != null && !jsonObj.get("minimum").isJsonNull())
                && !jsonObj.get("minimum").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minimum` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("minimum").toString()));
        }
        if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull())
                && !jsonObj.get("fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fee` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("fee").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetRwusdQuotaDetailsResponseStandardRedemptionQuota.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetRwusdQuotaDetailsResponseStandardRedemptionQuota' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetRwusdQuotaDetailsResponseStandardRedemptionQuota> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    GetRwusdQuotaDetailsResponseStandardRedemptionQuota.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetRwusdQuotaDetailsResponseStandardRedemptionQuota>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetRwusdQuotaDetailsResponseStandardRedemptionQuota value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetRwusdQuotaDetailsResponseStandardRedemptionQuota read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetRwusdQuotaDetailsResponseStandardRedemptionQuota given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of GetRwusdQuotaDetailsResponseStandardRedemptionQuota
     * @throws IOException if the JSON string is invalid with respect to
     *     GetRwusdQuotaDetailsResponseStandardRedemptionQuota
     */
    public static GetRwusdQuotaDetailsResponseStandardRedemptionQuota fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetRwusdQuotaDetailsResponseStandardRedemptionQuota.class);
    }

    /**
     * Convert an instance of GetRwusdQuotaDetailsResponseStandardRedemptionQuota to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.model;

import com.binance.connector.client.simple_earn.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** SubscribeRwusdResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SubscribeRwusdResponse {
    public static final String SERIALIZED_NAME_SUCCESS = "success";

    @SerializedName(SERIALIZED_NAME_SUCCESS)
    @jakarta.annotation.Nullable
    private Boolean success;

    public static final String SERIALIZED_NAME_RWUSD_AMOUNT = "rwusdAmount";

    @SerializedName(SERIALIZED_NAME_RWUSD_AMOUNT)
    @jakarta.annotation.Nullable
    private String rwusdAmount;

    public SubscribeRwusdResponse() {}

    public SubscribeRwusdResponse success(@jakarta.annotation.Nullable Boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get success
     *
     * @return success
     */
    @jakarta.annotation.Nullable
    public Boolean getSuccess() {
        return success;
    }

    public void setSuccess(@jakarta.annotation.Nullable Boolean success) {
        this.success = success;
    }

    public SubscribeRwusdResponse rwusdAmount(@jakarta.annotation.Nullable String rwusdAmount) {
        this.rwusdAmount = rwusdAmount;
        return this;
    }

    /**
     * Get rwusdAmount
     *
     * @return rwusdAmount
     */
    @jakarta.annotation.Nullable
    public String getRwusdAmount() {
        return rwusdAmount;
    }

    public void setRwusdAmount(@jakarta.annotation.Nullable String rwusdAmount) {
        this.rwusdAmount = rwusdAmount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscribeRwusdResponse subscribeRwusdResponse = (SubscribeRwusdResponse) o;
        return Objects.equals(this.success, subscribeRwusdResponse.success)
                && Objects.equals(this.rwusdAmount, subscribeRwusdResponse.rwusdAmount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(success, rwusdAmount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscribeRwusdResponse {\n");
        sb.append("		success: ").append(toIndentedString(success)).append("\n");
        sb.append("		rwusdAmount: ").append(toIndentedString(rwusdAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object successValue = getSuccess();
        String successValueAsString = "";
        successValueAsString = successValue.toString();
        sb.append("success=").append(urlEncode(successValueAsString)).append("");
        Object rwusdAmountValue = getRwusdAmount();
        String rwusdAmountValueAsString = "";
        rwusdAmountValueAsString = rwusdAmountValue.toString();
        sb.append("rwusdAmount=").append(urlEncode(rwusdAmountValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("success");
        openapiFields.add("rwusdAmount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SubscribeRwusdResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SubscribeRwusdResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SubscribeRwusdResponse is not found in"
                                        + " the empty JSON string",
                                SubscribeRwusdResponse.openapiRequiredFields.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("rwusdAmount") != null && !jsonObj.get("rwusdAmount").isJsonNull())
                && !jsonObj.get("rwusdAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rwusdAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("rwusdAmount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SubscribeRwusdResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SubscribeRwusdResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SubscribeRwusdResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SubscribeRwusdResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SubscribeRwusdResponse>() {
                        @Override
                        public void write(JsonWriter out, SubscribeRwusdResponse value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SubscribeRwusdResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SubscribeRwusdResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SubscribeRwusdResponse
     * @throws IOException if the JSON string is invalid with respect to SubscribeRwusdResponse
     */
    public static SubscribeRwusdResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SubscribeRwusdResponse.class);
    }

    /**
     * Convert an instance of SubscribeRwusdResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

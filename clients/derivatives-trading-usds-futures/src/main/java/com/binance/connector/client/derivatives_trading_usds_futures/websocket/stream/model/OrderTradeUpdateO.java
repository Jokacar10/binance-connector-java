/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderTradeUpdateO */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderTradeUpdateO extends BaseDTO {
    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_C_LOWER_CASE = "c";

    @SerializedName(SERIALIZED_NAME_C_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String cLowerCase;

    public static final String SERIALIZED_NAME_S = "S";

    @SerializedName(SERIALIZED_NAME_S)
    @jakarta.annotation.Nullable
    private String S;

    public static final String SERIALIZED_NAME_O_LOWER_CASE = "o";

    @SerializedName(SERIALIZED_NAME_O_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String oLowerCase;

    public static final String SERIALIZED_NAME_F_LOWER_CASE = "f";

    @SerializedName(SERIALIZED_NAME_F_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String fLowerCase;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_P_LOWER_CASE = "p";

    @SerializedName(SERIALIZED_NAME_P_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String pLowerCase;

    public static final String SERIALIZED_NAME_AP = "ap";

    @SerializedName(SERIALIZED_NAME_AP)
    @jakarta.annotation.Nullable
    private String ap;

    public static final String SERIALIZED_NAME_SP = "sp";

    @SerializedName(SERIALIZED_NAME_SP)
    @jakarta.annotation.Nullable
    private String sp;

    public static final String SERIALIZED_NAME_X_LOWER_CASE = "x";

    @SerializedName(SERIALIZED_NAME_X_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String xLowerCase;

    public static final String SERIALIZED_NAME_X = "X";

    @SerializedName(SERIALIZED_NAME_X)
    @jakarta.annotation.Nullable
    private String X;

    public static final String SERIALIZED_NAME_I_LOWER_CASE = "i";

    @SerializedName(SERIALIZED_NAME_I_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long iLowerCase;

    public static final String SERIALIZED_NAME_L_LOWER_CASE = "l";

    @SerializedName(SERIALIZED_NAME_L_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String lLowerCase;

    public static final String SERIALIZED_NAME_Z_LOWER_CASE = "z";

    @SerializedName(SERIALIZED_NAME_Z_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String zLowerCase;

    public static final String SERIALIZED_NAME_L = "L";

    @SerializedName(SERIALIZED_NAME_L)
    @jakarta.annotation.Nullable
    private String L;

    public static final String SERIALIZED_NAME_N = "N";

    @SerializedName(SERIALIZED_NAME_N)
    @jakarta.annotation.Nullable
    private String N;

    public static final String SERIALIZED_NAME_N_LOWER_CASE = "n";

    @SerializedName(SERIALIZED_NAME_N_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String nLowerCase;

    public static final String SERIALIZED_NAME_T = "T";

    @SerializedName(SERIALIZED_NAME_T)
    @jakarta.annotation.Nullable
    private Long T;

    public static final String SERIALIZED_NAME_T_LOWER_CASE = "t";

    @SerializedName(SERIALIZED_NAME_T_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long tLowerCase;

    public static final String SERIALIZED_NAME_B_LOWER_CASE = "b";

    @SerializedName(SERIALIZED_NAME_B_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String bLowerCase;

    public static final String SERIALIZED_NAME_A_LOWER_CASE = "a";

    @SerializedName(SERIALIZED_NAME_A_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String aLowerCase;

    public static final String SERIALIZED_NAME_M_LOWER_CASE = "m";

    @SerializedName(SERIALIZED_NAME_M_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Boolean mLowerCase;

    public static final String SERIALIZED_NAME_R = "R";

    @SerializedName(SERIALIZED_NAME_R)
    @jakarta.annotation.Nullable
    private Boolean R;

    public static final String SERIALIZED_NAME_WT = "wt";

    @SerializedName(SERIALIZED_NAME_WT)
    @jakarta.annotation.Nullable
    private String wt;

    public static final String SERIALIZED_NAME_OT = "ot";

    @SerializedName(SERIALIZED_NAME_OT)
    @jakarta.annotation.Nullable
    private String ot;

    public static final String SERIALIZED_NAME_PS = "ps";

    @SerializedName(SERIALIZED_NAME_PS)
    @jakarta.annotation.Nullable
    private String ps;

    public static final String SERIALIZED_NAME_CP = "cp";

    @SerializedName(SERIALIZED_NAME_CP)
    @jakarta.annotation.Nullable
    private Boolean cp;

    public static final String SERIALIZED_NAME_A_P = "AP";

    @SerializedName(SERIALIZED_NAME_A_P)
    @jakarta.annotation.Nullable
    private String AP;

    public static final String SERIALIZED_NAME_CR = "cr";

    @SerializedName(SERIALIZED_NAME_CR)
    @jakarta.annotation.Nullable
    private String cr;

    public static final String SERIALIZED_NAME_P_P = "pP";

    @SerializedName(SERIALIZED_NAME_P_P)
    @jakarta.annotation.Nullable
    private Boolean pP;

    public static final String SERIALIZED_NAME_SI = "si";

    @SerializedName(SERIALIZED_NAME_SI)
    @jakarta.annotation.Nullable
    private Long si;

    public static final String SERIALIZED_NAME_SS = "ss";

    @SerializedName(SERIALIZED_NAME_SS)
    @jakarta.annotation.Nullable
    private Long ss;

    public static final String SERIALIZED_NAME_RP = "rp";

    @SerializedName(SERIALIZED_NAME_RP)
    @jakarta.annotation.Nullable
    private String rp;

    public static final String SERIALIZED_NAME_V = "V";

    @SerializedName(SERIALIZED_NAME_V)
    @jakarta.annotation.Nullable
    private String V;

    public static final String SERIALIZED_NAME_PM = "pm";

    @SerializedName(SERIALIZED_NAME_PM)
    @jakarta.annotation.Nullable
    private String pm;

    public static final String SERIALIZED_NAME_GTD = "gtd";

    @SerializedName(SERIALIZED_NAME_GTD)
    @jakarta.annotation.Nullable
    private Long gtd;

    public static final String SERIALIZED_NAME_ER = "er";

    @SerializedName(SERIALIZED_NAME_ER)
    @jakarta.annotation.Nullable
    private String er;

    public OrderTradeUpdateO() {}

    public OrderTradeUpdateO sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public OrderTradeUpdateO cLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
        return this;
    }

    /**
     * Get cLowerCase
     *
     * @return cLowerCase
     */
    @jakarta.annotation.Nullable
    public String getcLowerCase() {
        return cLowerCase;
    }

    public void setcLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
    }

    public OrderTradeUpdateO S(@jakarta.annotation.Nullable String S) {
        this.S = S;
        return this;
    }

    /**
     * Get S
     *
     * @return S
     */
    @jakarta.annotation.Nullable
    public String getS() {
        return S;
    }

    public void setS(@jakarta.annotation.Nullable String S) {
        this.S = S;
    }

    public OrderTradeUpdateO oLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
        return this;
    }

    /**
     * Get oLowerCase
     *
     * @return oLowerCase
     */
    @jakarta.annotation.Nullable
    public String getoLowerCase() {
        return oLowerCase;
    }

    public void setoLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
    }

    public OrderTradeUpdateO fLowerCase(@jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
        return this;
    }

    /**
     * Get fLowerCase
     *
     * @return fLowerCase
     */
    @jakarta.annotation.Nullable
    public String getfLowerCase() {
        return fLowerCase;
    }

    public void setfLowerCase(@jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
    }

    public OrderTradeUpdateO qLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public OrderTradeUpdateO pLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
        return this;
    }

    /**
     * Get pLowerCase
     *
     * @return pLowerCase
     */
    @jakarta.annotation.Nullable
    public String getpLowerCase() {
        return pLowerCase;
    }

    public void setpLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
    }

    public OrderTradeUpdateO ap(@jakarta.annotation.Nullable String ap) {
        this.ap = ap;
        return this;
    }

    /**
     * Get ap
     *
     * @return ap
     */
    @jakarta.annotation.Nullable
    public String getAp() {
        return ap;
    }

    public void setAp(@jakarta.annotation.Nullable String ap) {
        this.ap = ap;
    }

    public OrderTradeUpdateO sp(@jakarta.annotation.Nullable String sp) {
        this.sp = sp;
        return this;
    }

    /**
     * Get sp
     *
     * @return sp
     */
    @jakarta.annotation.Nullable
    public String getSp() {
        return sp;
    }

    public void setSp(@jakarta.annotation.Nullable String sp) {
        this.sp = sp;
    }

    public OrderTradeUpdateO xLowerCase(@jakarta.annotation.Nullable String xLowerCase) {
        this.xLowerCase = xLowerCase;
        return this;
    }

    /**
     * Get xLowerCase
     *
     * @return xLowerCase
     */
    @jakarta.annotation.Nullable
    public String getxLowerCase() {
        return xLowerCase;
    }

    public void setxLowerCase(@jakarta.annotation.Nullable String xLowerCase) {
        this.xLowerCase = xLowerCase;
    }

    public OrderTradeUpdateO X(@jakarta.annotation.Nullable String X) {
        this.X = X;
        return this;
    }

    /**
     * Get X
     *
     * @return X
     */
    @jakarta.annotation.Nullable
    public String getX() {
        return X;
    }

    public void setX(@jakarta.annotation.Nullable String X) {
        this.X = X;
    }

    public OrderTradeUpdateO iLowerCase(@jakarta.annotation.Nullable Long iLowerCase) {
        this.iLowerCase = iLowerCase;
        return this;
    }

    /**
     * Get iLowerCase
     *
     * @return iLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getiLowerCase() {
        return iLowerCase;
    }

    public void setiLowerCase(@jakarta.annotation.Nullable Long iLowerCase) {
        this.iLowerCase = iLowerCase;
    }

    public OrderTradeUpdateO lLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
        return this;
    }

    /**
     * Get lLowerCase
     *
     * @return lLowerCase
     */
    @jakarta.annotation.Nullable
    public String getlLowerCase() {
        return lLowerCase;
    }

    public void setlLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
    }

    public OrderTradeUpdateO zLowerCase(@jakarta.annotation.Nullable String zLowerCase) {
        this.zLowerCase = zLowerCase;
        return this;
    }

    /**
     * Get zLowerCase
     *
     * @return zLowerCase
     */
    @jakarta.annotation.Nullable
    public String getzLowerCase() {
        return zLowerCase;
    }

    public void setzLowerCase(@jakarta.annotation.Nullable String zLowerCase) {
        this.zLowerCase = zLowerCase;
    }

    public OrderTradeUpdateO L(@jakarta.annotation.Nullable String L) {
        this.L = L;
        return this;
    }

    /**
     * Get L
     *
     * @return L
     */
    @jakarta.annotation.Nullable
    public String getL() {
        return L;
    }

    public void setL(@jakarta.annotation.Nullable String L) {
        this.L = L;
    }

    public OrderTradeUpdateO N(@jakarta.annotation.Nullable String N) {
        this.N = N;
        return this;
    }

    /**
     * Get N
     *
     * @return N
     */
    @jakarta.annotation.Nullable
    public String getN() {
        return N;
    }

    public void setN(@jakarta.annotation.Nullable String N) {
        this.N = N;
    }

    public OrderTradeUpdateO nLowerCase(@jakarta.annotation.Nullable String nLowerCase) {
        this.nLowerCase = nLowerCase;
        return this;
    }

    /**
     * Get nLowerCase
     *
     * @return nLowerCase
     */
    @jakarta.annotation.Nullable
    public String getnLowerCase() {
        return nLowerCase;
    }

    public void setnLowerCase(@jakarta.annotation.Nullable String nLowerCase) {
        this.nLowerCase = nLowerCase;
    }

    public OrderTradeUpdateO T(@jakarta.annotation.Nullable Long T) {
        this.T = T;
        return this;
    }

    /**
     * Get T
     *
     * @return T
     */
    @jakarta.annotation.Nullable
    public Long getT() {
        return T;
    }

    public void setT(@jakarta.annotation.Nullable Long T) {
        this.T = T;
    }

    public OrderTradeUpdateO tLowerCase(@jakarta.annotation.Nullable Long tLowerCase) {
        this.tLowerCase = tLowerCase;
        return this;
    }

    /**
     * Get tLowerCase
     *
     * @return tLowerCase
     */
    @jakarta.annotation.Nullable
    public Long gettLowerCase() {
        return tLowerCase;
    }

    public void settLowerCase(@jakarta.annotation.Nullable Long tLowerCase) {
        this.tLowerCase = tLowerCase;
    }

    public OrderTradeUpdateO bLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
        return this;
    }

    /**
     * Get bLowerCase
     *
     * @return bLowerCase
     */
    @jakarta.annotation.Nullable
    public String getbLowerCase() {
        return bLowerCase;
    }

    public void setbLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
    }

    public OrderTradeUpdateO aLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
        return this;
    }

    /**
     * Get aLowerCase
     *
     * @return aLowerCase
     */
    @jakarta.annotation.Nullable
    public String getaLowerCase() {
        return aLowerCase;
    }

    public void setaLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
    }

    public OrderTradeUpdateO mLowerCase(@jakarta.annotation.Nullable Boolean mLowerCase) {
        this.mLowerCase = mLowerCase;
        return this;
    }

    /**
     * Get mLowerCase
     *
     * @return mLowerCase
     */
    @jakarta.annotation.Nullable
    public Boolean getmLowerCase() {
        return mLowerCase;
    }

    public void setmLowerCase(@jakarta.annotation.Nullable Boolean mLowerCase) {
        this.mLowerCase = mLowerCase;
    }

    public OrderTradeUpdateO R(@jakarta.annotation.Nullable Boolean R) {
        this.R = R;
        return this;
    }

    /**
     * Get R
     *
     * @return R
     */
    @jakarta.annotation.Nullable
    public Boolean getR() {
        return R;
    }

    public void setR(@jakarta.annotation.Nullable Boolean R) {
        this.R = R;
    }

    public OrderTradeUpdateO wt(@jakarta.annotation.Nullable String wt) {
        this.wt = wt;
        return this;
    }

    /**
     * Get wt
     *
     * @return wt
     */
    @jakarta.annotation.Nullable
    public String getWt() {
        return wt;
    }

    public void setWt(@jakarta.annotation.Nullable String wt) {
        this.wt = wt;
    }

    public OrderTradeUpdateO ot(@jakarta.annotation.Nullable String ot) {
        this.ot = ot;
        return this;
    }

    /**
     * Get ot
     *
     * @return ot
     */
    @jakarta.annotation.Nullable
    public String getOt() {
        return ot;
    }

    public void setOt(@jakarta.annotation.Nullable String ot) {
        this.ot = ot;
    }

    public OrderTradeUpdateO ps(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
        return this;
    }

    /**
     * Get ps
     *
     * @return ps
     */
    @jakarta.annotation.Nullable
    public String getPs() {
        return ps;
    }

    public void setPs(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
    }

    public OrderTradeUpdateO cp(@jakarta.annotation.Nullable Boolean cp) {
        this.cp = cp;
        return this;
    }

    /**
     * Get cp
     *
     * @return cp
     */
    @jakarta.annotation.Nullable
    public Boolean getCp() {
        return cp;
    }

    public void setCp(@jakarta.annotation.Nullable Boolean cp) {
        this.cp = cp;
    }

    public OrderTradeUpdateO AP(@jakarta.annotation.Nullable String AP) {
        this.AP = AP;
        return this;
    }

    /**
     * Get AP
     *
     * @return AP
     */
    @jakarta.annotation.Nullable
    public String getAP() {
        return AP;
    }

    public void setAP(@jakarta.annotation.Nullable String AP) {
        this.AP = AP;
    }

    public OrderTradeUpdateO cr(@jakarta.annotation.Nullable String cr) {
        this.cr = cr;
        return this;
    }

    /**
     * Get cr
     *
     * @return cr
     */
    @jakarta.annotation.Nullable
    public String getCr() {
        return cr;
    }

    public void setCr(@jakarta.annotation.Nullable String cr) {
        this.cr = cr;
    }

    public OrderTradeUpdateO pP(@jakarta.annotation.Nullable Boolean pP) {
        this.pP = pP;
        return this;
    }

    /**
     * Get pP
     *
     * @return pP
     */
    @jakarta.annotation.Nullable
    public Boolean getpP() {
        return pP;
    }

    public void setpP(@jakarta.annotation.Nullable Boolean pP) {
        this.pP = pP;
    }

    public OrderTradeUpdateO si(@jakarta.annotation.Nullable Long si) {
        this.si = si;
        return this;
    }

    /**
     * Get si
     *
     * @return si
     */
    @jakarta.annotation.Nullable
    public Long getSi() {
        return si;
    }

    public void setSi(@jakarta.annotation.Nullable Long si) {
        this.si = si;
    }

    public OrderTradeUpdateO ss(@jakarta.annotation.Nullable Long ss) {
        this.ss = ss;
        return this;
    }

    /**
     * Get ss
     *
     * @return ss
     */
    @jakarta.annotation.Nullable
    public Long getSs() {
        return ss;
    }

    public void setSs(@jakarta.annotation.Nullable Long ss) {
        this.ss = ss;
    }

    public OrderTradeUpdateO rp(@jakarta.annotation.Nullable String rp) {
        this.rp = rp;
        return this;
    }

    /**
     * Get rp
     *
     * @return rp
     */
    @jakarta.annotation.Nullable
    public String getRp() {
        return rp;
    }

    public void setRp(@jakarta.annotation.Nullable String rp) {
        this.rp = rp;
    }

    public OrderTradeUpdateO V(@jakarta.annotation.Nullable String V) {
        this.V = V;
        return this;
    }

    /**
     * Get V
     *
     * @return V
     */
    @jakarta.annotation.Nullable
    public String getV() {
        return V;
    }

    public void setV(@jakarta.annotation.Nullable String V) {
        this.V = V;
    }

    public OrderTradeUpdateO pm(@jakarta.annotation.Nullable String pm) {
        this.pm = pm;
        return this;
    }

    /**
     * Get pm
     *
     * @return pm
     */
    @jakarta.annotation.Nullable
    public String getPm() {
        return pm;
    }

    public void setPm(@jakarta.annotation.Nullable String pm) {
        this.pm = pm;
    }

    public OrderTradeUpdateO gtd(@jakarta.annotation.Nullable Long gtd) {
        this.gtd = gtd;
        return this;
    }

    /**
     * Get gtd
     *
     * @return gtd
     */
    @jakarta.annotation.Nullable
    public Long getGtd() {
        return gtd;
    }

    public void setGtd(@jakarta.annotation.Nullable Long gtd) {
        this.gtd = gtd;
    }

    public OrderTradeUpdateO er(@jakarta.annotation.Nullable String er) {
        this.er = er;
        return this;
    }

    /**
     * Get er
     *
     * @return er
     */
    @jakarta.annotation.Nullable
    public String getEr() {
        return er;
    }

    public void setEr(@jakarta.annotation.Nullable String er) {
        this.er = er;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderTradeUpdateO orderTradeUpdateO = (OrderTradeUpdateO) o;
        return Objects.equals(this.sLowerCase, orderTradeUpdateO.sLowerCase)
                && Objects.equals(this.cLowerCase, orderTradeUpdateO.cLowerCase)
                && Objects.equals(this.S, orderTradeUpdateO.S)
                && Objects.equals(this.oLowerCase, orderTradeUpdateO.oLowerCase)
                && Objects.equals(this.fLowerCase, orderTradeUpdateO.fLowerCase)
                && Objects.equals(this.qLowerCase, orderTradeUpdateO.qLowerCase)
                && Objects.equals(this.pLowerCase, orderTradeUpdateO.pLowerCase)
                && Objects.equals(this.ap, orderTradeUpdateO.ap)
                && Objects.equals(this.sp, orderTradeUpdateO.sp)
                && Objects.equals(this.xLowerCase, orderTradeUpdateO.xLowerCase)
                && Objects.equals(this.X, orderTradeUpdateO.X)
                && Objects.equals(this.iLowerCase, orderTradeUpdateO.iLowerCase)
                && Objects.equals(this.lLowerCase, orderTradeUpdateO.lLowerCase)
                && Objects.equals(this.zLowerCase, orderTradeUpdateO.zLowerCase)
                && Objects.equals(this.L, orderTradeUpdateO.L)
                && Objects.equals(this.N, orderTradeUpdateO.N)
                && Objects.equals(this.nLowerCase, orderTradeUpdateO.nLowerCase)
                && Objects.equals(this.T, orderTradeUpdateO.T)
                && Objects.equals(this.tLowerCase, orderTradeUpdateO.tLowerCase)
                && Objects.equals(this.bLowerCase, orderTradeUpdateO.bLowerCase)
                && Objects.equals(this.aLowerCase, orderTradeUpdateO.aLowerCase)
                && Objects.equals(this.mLowerCase, orderTradeUpdateO.mLowerCase)
                && Objects.equals(this.R, orderTradeUpdateO.R)
                && Objects.equals(this.wt, orderTradeUpdateO.wt)
                && Objects.equals(this.ot, orderTradeUpdateO.ot)
                && Objects.equals(this.ps, orderTradeUpdateO.ps)
                && Objects.equals(this.cp, orderTradeUpdateO.cp)
                && Objects.equals(this.AP, orderTradeUpdateO.AP)
                && Objects.equals(this.cr, orderTradeUpdateO.cr)
                && Objects.equals(this.pP, orderTradeUpdateO.pP)
                && Objects.equals(this.si, orderTradeUpdateO.si)
                && Objects.equals(this.ss, orderTradeUpdateO.ss)
                && Objects.equals(this.rp, orderTradeUpdateO.rp)
                && Objects.equals(this.V, orderTradeUpdateO.V)
                && Objects.equals(this.pm, orderTradeUpdateO.pm)
                && Objects.equals(this.gtd, orderTradeUpdateO.gtd)
                && Objects.equals(this.er, orderTradeUpdateO.er);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sLowerCase,
                cLowerCase,
                S,
                oLowerCase,
                fLowerCase,
                qLowerCase,
                pLowerCase,
                ap,
                sp,
                xLowerCase,
                X,
                iLowerCase,
                lLowerCase,
                zLowerCase,
                L,
                N,
                nLowerCase,
                T,
                tLowerCase,
                bLowerCase,
                aLowerCase,
                mLowerCase,
                R,
                wt,
                ot,
                ps,
                cp,
                AP,
                cr,
                pP,
                si,
                ss,
                rp,
                V,
                pm,
                gtd,
                er);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderTradeUpdateO {\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		cLowerCase: ").append(toIndentedString(cLowerCase)).append("\n");
        sb.append("		S: ").append(toIndentedString(S)).append("\n");
        sb.append("		oLowerCase: ").append(toIndentedString(oLowerCase)).append("\n");
        sb.append("		fLowerCase: ").append(toIndentedString(fLowerCase)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		pLowerCase: ").append(toIndentedString(pLowerCase)).append("\n");
        sb.append("		ap: ").append(toIndentedString(ap)).append("\n");
        sb.append("		sp: ").append(toIndentedString(sp)).append("\n");
        sb.append("		xLowerCase: ").append(toIndentedString(xLowerCase)).append("\n");
        sb.append("		X: ").append(toIndentedString(X)).append("\n");
        sb.append("		iLowerCase: ").append(toIndentedString(iLowerCase)).append("\n");
        sb.append("		lLowerCase: ").append(toIndentedString(lLowerCase)).append("\n");
        sb.append("		zLowerCase: ").append(toIndentedString(zLowerCase)).append("\n");
        sb.append("		L: ").append(toIndentedString(L)).append("\n");
        sb.append("		N: ").append(toIndentedString(N)).append("\n");
        sb.append("		nLowerCase: ").append(toIndentedString(nLowerCase)).append("\n");
        sb.append("		T: ").append(toIndentedString(T)).append("\n");
        sb.append("		tLowerCase: ").append(toIndentedString(tLowerCase)).append("\n");
        sb.append("		bLowerCase: ").append(toIndentedString(bLowerCase)).append("\n");
        sb.append("		aLowerCase: ").append(toIndentedString(aLowerCase)).append("\n");
        sb.append("		mLowerCase: ").append(toIndentedString(mLowerCase)).append("\n");
        sb.append("		R: ").append(toIndentedString(R)).append("\n");
        sb.append("		wt: ").append(toIndentedString(wt)).append("\n");
        sb.append("		ot: ").append(toIndentedString(ot)).append("\n");
        sb.append("		ps: ").append(toIndentedString(ps)).append("\n");
        sb.append("		cp: ").append(toIndentedString(cp)).append("\n");
        sb.append("		AP: ").append(toIndentedString(AP)).append("\n");
        sb.append("		cr: ").append(toIndentedString(cr)).append("\n");
        sb.append("		pP: ").append(toIndentedString(pP)).append("\n");
        sb.append("		si: ").append(toIndentedString(si)).append("\n");
        sb.append("		ss: ").append(toIndentedString(ss)).append("\n");
        sb.append("		rp: ").append(toIndentedString(rp)).append("\n");
        sb.append("		V: ").append(toIndentedString(V)).append("\n");
        sb.append("		pm: ").append(toIndentedString(pm)).append("\n");
        sb.append("		gtd: ").append(toIndentedString(gtd)).append("\n");
        sb.append("		er: ").append(toIndentedString(er)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            String cLowerCaseValueAsString = cLowerCaseValue.toString();
            valMap.put("cLowerCase", cLowerCaseValueAsString);
        }
        String SValue = getS();
        if (SValue != null) {
            String SValueAsString = SValue.toString();
            valMap.put("S", SValueAsString);
        }
        String oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            String oLowerCaseValueAsString = oLowerCaseValue.toString();
            valMap.put("oLowerCase", oLowerCaseValueAsString);
        }
        String fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            String fLowerCaseValueAsString = fLowerCaseValue.toString();
            valMap.put("fLowerCase", fLowerCaseValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        String pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            String pLowerCaseValueAsString = pLowerCaseValue.toString();
            valMap.put("pLowerCase", pLowerCaseValueAsString);
        }
        String apValue = getAp();
        if (apValue != null) {
            String apValueAsString = apValue.toString();
            valMap.put("ap", apValueAsString);
        }
        String spValue = getSp();
        if (spValue != null) {
            String spValueAsString = spValue.toString();
            valMap.put("sp", spValueAsString);
        }
        String xLowerCaseValue = getxLowerCase();
        if (xLowerCaseValue != null) {
            String xLowerCaseValueAsString = xLowerCaseValue.toString();
            valMap.put("xLowerCase", xLowerCaseValueAsString);
        }
        String XValue = getX();
        if (XValue != null) {
            String XValueAsString = XValue.toString();
            valMap.put("X", XValueAsString);
        }
        Long iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            String iLowerCaseValueAsString = iLowerCaseValue.toString();
            valMap.put("iLowerCase", iLowerCaseValueAsString);
        }
        String lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            String lLowerCaseValueAsString = lLowerCaseValue.toString();
            valMap.put("lLowerCase", lLowerCaseValueAsString);
        }
        String zLowerCaseValue = getzLowerCase();
        if (zLowerCaseValue != null) {
            String zLowerCaseValueAsString = zLowerCaseValue.toString();
            valMap.put("zLowerCase", zLowerCaseValueAsString);
        }
        String LValue = getL();
        if (LValue != null) {
            String LValueAsString = LValue.toString();
            valMap.put("L", LValueAsString);
        }
        String NValue = getN();
        if (NValue != null) {
            String NValueAsString = NValue.toString();
            valMap.put("N", NValueAsString);
        }
        String nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            String nLowerCaseValueAsString = nLowerCaseValue.toString();
            valMap.put("nLowerCase", nLowerCaseValueAsString);
        }
        Long TValue = getT();
        if (TValue != null) {
            String TValueAsString = TValue.toString();
            valMap.put("T", TValueAsString);
        }
        Long tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            String tLowerCaseValueAsString = tLowerCaseValue.toString();
            valMap.put("tLowerCase", tLowerCaseValueAsString);
        }
        String bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            String bLowerCaseValueAsString = bLowerCaseValue.toString();
            valMap.put("bLowerCase", bLowerCaseValueAsString);
        }
        String aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            String aLowerCaseValueAsString = aLowerCaseValue.toString();
            valMap.put("aLowerCase", aLowerCaseValueAsString);
        }
        Boolean mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            String mLowerCaseValueAsString = mLowerCaseValue.toString();
            valMap.put("mLowerCase", mLowerCaseValueAsString);
        }
        Boolean RValue = getR();
        if (RValue != null) {
            String RValueAsString = RValue.toString();
            valMap.put("R", RValueAsString);
        }
        String wtValue = getWt();
        if (wtValue != null) {
            String wtValueAsString = wtValue.toString();
            valMap.put("wt", wtValueAsString);
        }
        String otValue = getOt();
        if (otValue != null) {
            String otValueAsString = otValue.toString();
            valMap.put("ot", otValueAsString);
        }
        String psValue = getPs();
        if (psValue != null) {
            String psValueAsString = psValue.toString();
            valMap.put("ps", psValueAsString);
        }
        Boolean cpValue = getCp();
        if (cpValue != null) {
            String cpValueAsString = cpValue.toString();
            valMap.put("cp", cpValueAsString);
        }
        String APValue = getAP();
        if (APValue != null) {
            String APValueAsString = APValue.toString();
            valMap.put("AP", APValueAsString);
        }
        String crValue = getCr();
        if (crValue != null) {
            String crValueAsString = crValue.toString();
            valMap.put("cr", crValueAsString);
        }
        Boolean pPValue = getpP();
        if (pPValue != null) {
            String pPValueAsString = pPValue.toString();
            valMap.put("pP", pPValueAsString);
        }
        Long siValue = getSi();
        if (siValue != null) {
            String siValueAsString = siValue.toString();
            valMap.put("si", siValueAsString);
        }
        Long ssValue = getSs();
        if (ssValue != null) {
            String ssValueAsString = ssValue.toString();
            valMap.put("ss", ssValueAsString);
        }
        String rpValue = getRp();
        if (rpValue != null) {
            String rpValueAsString = rpValue.toString();
            valMap.put("rp", rpValueAsString);
        }
        String VValue = getV();
        if (VValue != null) {
            String VValueAsString = VValue.toString();
            valMap.put("V", VValueAsString);
        }
        String pmValue = getPm();
        if (pmValue != null) {
            String pmValueAsString = pmValue.toString();
            valMap.put("pm", pmValueAsString);
        }
        Long gtdValue = getGtd();
        if (gtdValue != null) {
            String gtdValueAsString = gtdValue.toString();
            valMap.put("gtd", gtdValueAsString);
        }
        String erValue = getEr();
        if (erValue != null) {
            String erValueAsString = erValue.toString();
            valMap.put("er", erValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            valMap.put("cLowerCase", cLowerCaseValue);
        }
        Object SValue = getS();
        if (SValue != null) {
            valMap.put("S", SValue);
        }
        Object oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            valMap.put("oLowerCase", oLowerCaseValue);
        }
        Object fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            valMap.put("fLowerCase", fLowerCaseValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            valMap.put("pLowerCase", pLowerCaseValue);
        }
        Object apValue = getAp();
        if (apValue != null) {
            valMap.put("ap", apValue);
        }
        Object spValue = getSp();
        if (spValue != null) {
            valMap.put("sp", spValue);
        }
        Object xLowerCaseValue = getxLowerCase();
        if (xLowerCaseValue != null) {
            valMap.put("xLowerCase", xLowerCaseValue);
        }
        Object XValue = getX();
        if (XValue != null) {
            valMap.put("X", XValue);
        }
        Object iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            valMap.put("iLowerCase", iLowerCaseValue);
        }
        Object lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            valMap.put("lLowerCase", lLowerCaseValue);
        }
        Object zLowerCaseValue = getzLowerCase();
        if (zLowerCaseValue != null) {
            valMap.put("zLowerCase", zLowerCaseValue);
        }
        Object LValue = getL();
        if (LValue != null) {
            valMap.put("L", LValue);
        }
        Object NValue = getN();
        if (NValue != null) {
            valMap.put("N", NValue);
        }
        Object nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            valMap.put("nLowerCase", nLowerCaseValue);
        }
        Object TValue = getT();
        if (TValue != null) {
            valMap.put("T", TValue);
        }
        Object tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            valMap.put("tLowerCase", tLowerCaseValue);
        }
        Object bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            valMap.put("bLowerCase", bLowerCaseValue);
        }
        Object aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            valMap.put("aLowerCase", aLowerCaseValue);
        }
        Object mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            valMap.put("mLowerCase", mLowerCaseValue);
        }
        Object RValue = getR();
        if (RValue != null) {
            valMap.put("R", RValue);
        }
        Object wtValue = getWt();
        if (wtValue != null) {
            valMap.put("wt", wtValue);
        }
        Object otValue = getOt();
        if (otValue != null) {
            valMap.put("ot", otValue);
        }
        Object psValue = getPs();
        if (psValue != null) {
            valMap.put("ps", psValue);
        }
        Object cpValue = getCp();
        if (cpValue != null) {
            valMap.put("cp", cpValue);
        }
        Object APValue = getAP();
        if (APValue != null) {
            valMap.put("AP", APValue);
        }
        Object crValue = getCr();
        if (crValue != null) {
            valMap.put("cr", crValue);
        }
        Object pPValue = getpP();
        if (pPValue != null) {
            valMap.put("pP", pPValue);
        }
        Object siValue = getSi();
        if (siValue != null) {
            valMap.put("si", siValue);
        }
        Object ssValue = getSs();
        if (ssValue != null) {
            valMap.put("ss", ssValue);
        }
        Object rpValue = getRp();
        if (rpValue != null) {
            valMap.put("rp", rpValue);
        }
        Object VValue = getV();
        if (VValue != null) {
            valMap.put("V", VValue);
        }
        Object pmValue = getPm();
        if (pmValue != null) {
            valMap.put("pm", pmValue);
        }
        Object gtdValue = getGtd();
        if (gtdValue != null) {
            valMap.put("gtd", gtdValue);
        }
        Object erValue = getEr();
        if (erValue != null) {
            valMap.put("er", erValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("s");
        openapiFields.add("c");
        openapiFields.add("S");
        openapiFields.add("o");
        openapiFields.add("f");
        openapiFields.add("q");
        openapiFields.add("p");
        openapiFields.add("ap");
        openapiFields.add("sp");
        openapiFields.add("x");
        openapiFields.add("X");
        openapiFields.add("i");
        openapiFields.add("l");
        openapiFields.add("z");
        openapiFields.add("L");
        openapiFields.add("N");
        openapiFields.add("n");
        openapiFields.add("T");
        openapiFields.add("t");
        openapiFields.add("b");
        openapiFields.add("a");
        openapiFields.add("m");
        openapiFields.add("R");
        openapiFields.add("wt");
        openapiFields.add("ot");
        openapiFields.add("ps");
        openapiFields.add("cp");
        openapiFields.add("AP");
        openapiFields.add("cr");
        openapiFields.add("pP");
        openapiFields.add("si");
        openapiFields.add("ss");
        openapiFields.add("rp");
        openapiFields.add("V");
        openapiFields.add("pm");
        openapiFields.add("gtd");
        openapiFields.add("er");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderTradeUpdateO
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderTradeUpdateO.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderTradeUpdateO is not found in the"
                                        + " empty JSON string",
                                OrderTradeUpdateO.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderTradeUpdateO.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderTradeUpdateO` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull())
                && !jsonObj.get("c").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `c` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("c").toString()));
        }
        if ((jsonObj.get("S") != null && !jsonObj.get("S").isJsonNull())
                && !jsonObj.get("S").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `S` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("S").toString()));
        }
        if ((jsonObj.get("o") != null && !jsonObj.get("o").isJsonNull())
                && !jsonObj.get("o").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `o` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("o").toString()));
        }
        if ((jsonObj.get("f") != null && !jsonObj.get("f").isJsonNull())
                && !jsonObj.get("f").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `f` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("f").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
        if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull())
                && !jsonObj.get("p").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `p` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("p").toString()));
        }
        if ((jsonObj.get("ap") != null && !jsonObj.get("ap").isJsonNull())
                && !jsonObj.get("ap").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ap` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ap").toString()));
        }
        if ((jsonObj.get("sp") != null && !jsonObj.get("sp").isJsonNull())
                && !jsonObj.get("sp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sp` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("sp").toString()));
        }
        if ((jsonObj.get("x") != null && !jsonObj.get("x").isJsonNull())
                && !jsonObj.get("x").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `x` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("x").toString()));
        }
        if ((jsonObj.get("X") != null && !jsonObj.get("X").isJsonNull())
                && !jsonObj.get("X").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `X` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("X").toString()));
        }
        if ((jsonObj.get("l") != null && !jsonObj.get("l").isJsonNull())
                && !jsonObj.get("l").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `l` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("l").toString()));
        }
        if ((jsonObj.get("z") != null && !jsonObj.get("z").isJsonNull())
                && !jsonObj.get("z").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `z` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("z").toString()));
        }
        if ((jsonObj.get("L") != null && !jsonObj.get("L").isJsonNull())
                && !jsonObj.get("L").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `L` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("L").toString()));
        }
        if ((jsonObj.get("N") != null && !jsonObj.get("N").isJsonNull())
                && !jsonObj.get("N").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `N` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("N").toString()));
        }
        if ((jsonObj.get("n") != null && !jsonObj.get("n").isJsonNull())
                && !jsonObj.get("n").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `n` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("n").toString()));
        }
        if ((jsonObj.get("b") != null && !jsonObj.get("b").isJsonNull())
                && !jsonObj.get("b").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `b` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("b").toString()));
        }
        if ((jsonObj.get("a") != null && !jsonObj.get("a").isJsonNull())
                && !jsonObj.get("a").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `a` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("a").toString()));
        }
        if ((jsonObj.get("wt") != null && !jsonObj.get("wt").isJsonNull())
                && !jsonObj.get("wt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `wt` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("wt").toString()));
        }
        if ((jsonObj.get("ot") != null && !jsonObj.get("ot").isJsonNull())
                && !jsonObj.get("ot").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ot` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ot").toString()));
        }
        if ((jsonObj.get("ps") != null && !jsonObj.get("ps").isJsonNull())
                && !jsonObj.get("ps").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ps` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ps").toString()));
        }
        if ((jsonObj.get("AP") != null && !jsonObj.get("AP").isJsonNull())
                && !jsonObj.get("AP").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AP` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("AP").toString()));
        }
        if ((jsonObj.get("cr") != null && !jsonObj.get("cr").isJsonNull())
                && !jsonObj.get("cr").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cr` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("cr").toString()));
        }
        if ((jsonObj.get("rp") != null && !jsonObj.get("rp").isJsonNull())
                && !jsonObj.get("rp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rp` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("rp").toString()));
        }
        if ((jsonObj.get("V") != null && !jsonObj.get("V").isJsonNull())
                && !jsonObj.get("V").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `V` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("V").toString()));
        }
        if ((jsonObj.get("pm") != null && !jsonObj.get("pm").isJsonNull())
                && !jsonObj.get("pm").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pm` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("pm").toString()));
        }
        if ((jsonObj.get("er") != null && !jsonObj.get("er").isJsonNull())
                && !jsonObj.get("er").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `er` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("er").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderTradeUpdateO.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderTradeUpdateO' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderTradeUpdateO> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderTradeUpdateO.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderTradeUpdateO>() {
                        @Override
                        public void write(JsonWriter out, OrderTradeUpdateO value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderTradeUpdateO read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderTradeUpdateO given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderTradeUpdateO
     * @throws IOException if the JSON string is invalid with respect to OrderTradeUpdateO
     */
    public static OrderTradeUpdateO fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderTradeUpdateO.class);
    }

    /**
     * Convert an instance of OrderTradeUpdateO to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

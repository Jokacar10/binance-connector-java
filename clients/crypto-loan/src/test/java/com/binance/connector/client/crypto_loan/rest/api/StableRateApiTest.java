/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.crypto_loan.rest.model.CheckCollateralRepayRateStableRateResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetCryptoLoansIncomeHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetLoanBorrowHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetLoanLtvAdjustmentHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetLoanRepaymentHistoryResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for StableRateApi */
public class StableRateApiTest {

    private StableRateApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new StableRateApi(apiClientSpy);
    }

    /**
     * Check Collateral Repay Rate(USER_DATA)
     *
     * <p>Get the the rate of collateral coin / loan coin when using collateral repay, the rate will
     * be valid within 8 second. Weight: 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkCollateralRepayRateStableRateTest() throws ApiException, CryptoException {
        String loanCoin = "";
        String collateralCoin = "";
        Double repayAmount = 1d;
        Long recvWindow = 5000L;
        ApiResponse<CheckCollateralRepayRateStableRateResponse> response =
                api.checkCollateralRepayRateStableRate(
                        loanCoin, collateralCoin, repayAmount, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&collateralCoin=&repayAmount=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "daf94761a57c1455fad13013a2f9ee4ce20c3214895583fec61620ef05b9a867",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/repay/collateral/rate", actualRequest.url().encodedPath());
    }

    /**
     * Get Crypto Loans Income History(USER_DATA)
     *
     * <p>Get Crypto Loans Income History * If startTime and endTime are not sent, the recent 7-day
     * data will be returned. * The max interval between startTime and endTime is 30 days. Weight:
     * 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCryptoLoansIncomeHistoryTest() throws ApiException, CryptoException {
        String asset = "";
        String type = "1";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetCryptoLoansIncomeHistoryResponse> response =
                api.getCryptoLoansIncomeHistory(asset, type, startTime, endTime, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "asset=&type=1&startTime=1623319461670&endTime=1641782889000&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "fc6cecaab649b163a845cc9e78ea8541f91768db6412aab193710efb1c4155fb",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/income", actualRequest.url().encodedPath());
    }

    /**
     * Get Loan Borrow History(USER_DATA)
     *
     * <p>Get Loan Borrow History * If startTime and endTime are not sent, the recent 90-day data
     * will be returned. * The max interval between startTime and endTime is 180 days. Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoanBorrowHistoryTest() throws ApiException, CryptoException {
        Long orderId = 1L;
        String loanCoin = "";
        String collateralCoin = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetLoanBorrowHistoryResponse> response =
                api.getLoanBorrowHistory(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "orderId=1&loanCoin=&collateralCoin=&startTime=1623319461670&endTime=1641782889000&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "da8d1cb7245414268128e1a179781fd57029b19e851de2ccfb330a48eccc3a41",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/borrow/history", actualRequest.url().encodedPath());
    }

    /**
     * Get Loan LTV Adjustment History(USER_DATA)
     *
     * <p>Get Loan LTV Adjustment History * If startTime and endTime are not sent, the recent 90-day
     * data will be returned. * The max interval between startTime and endTime is 180 days. Weight:
     * 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoanLtvAdjustmentHistoryTest() throws ApiException, CryptoException {
        Long orderId = 1L;
        String loanCoin = "";
        String collateralCoin = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetLoanLtvAdjustmentHistoryResponse> response =
                api.getLoanLtvAdjustmentHistory(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "orderId=1&loanCoin=&collateralCoin=&startTime=1623319461670&endTime=1641782889000&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "da8d1cb7245414268128e1a179781fd57029b19e851de2ccfb330a48eccc3a41",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/ltv/adjustment/history", actualRequest.url().encodedPath());
    }

    /**
     * Get Loan Repayment History(USER_DATA)
     *
     * <p>Get Loan Repayment History * If startTime and endTime are not sent, the recent 90-day data
     * will be returned. * The max interval between startTime and endTime is 180 days. Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoanRepaymentHistoryTest() throws ApiException, CryptoException {
        Long orderId = 1L;
        String loanCoin = "";
        String collateralCoin = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetLoanRepaymentHistoryResponse> response =
                api.getLoanRepaymentHistory(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "orderId=1&loanCoin=&collateralCoin=&startTime=1623319461670&endTime=1641782889000&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "da8d1cb7245414268128e1a179781fd57029b19e851de2ccfb330a48eccc3a41",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/repay/history", actualRequest.url().encodedPath());
    }
}

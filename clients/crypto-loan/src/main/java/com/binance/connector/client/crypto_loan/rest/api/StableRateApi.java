/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.crypto_loan.rest.model.CheckCollateralRepayRateStableRateResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetCryptoLoansIncomeHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetLoanBorrowHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetLoanLtvAdjustmentHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetLoanRepaymentHistoryResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class StableRateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-crypto-loan/2.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public StableRateApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public StableRateApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkCollateralRepayRateStableRate
     *
     * @param loanCoin (required)
     * @param collateralCoin (required)
     * @param repayAmount repay amount of loanCoin (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Check Collateral Repay Rate </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/market-data/Check-Collateral-Repay-Rate">Check
     *     Collateral Repay Rate(USER_DATA) Documentation</a>
     */
    private okhttp3.Call checkCollateralRepayRateStableRateCall(
            String loanCoin, String collateralCoin, Double repayAmount, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/repay/collateral/rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (repayAmount != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "repayAmount", DecimalFormatter.getFormatter().format(repayAmount)));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCollateralRepayRateStableRateValidateBeforeCall(
            String loanCoin, String collateralCoin, Double repayAmount, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {loanCoin, collateralCoin, repayAmount, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "checkCollateralRepayRateStableRate",
                                    String.class,
                                    String.class,
                                    Double.class,
                                    Long.class);
            Set<ConstraintViolation<StableRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return checkCollateralRepayRateStableRateCall(
                        loanCoin, collateralCoin, repayAmount, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Check Collateral Repay Rate(USER_DATA) Get the the rate of collateral coin / loan coin when
     * using collateral repay, the rate will be valid within 8 second. Weight: 6000
     *
     * @param loanCoin (required)
     * @param collateralCoin (required)
     * @param repayAmount repay amount of loanCoin (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;CheckCollateralRepayRateStableRateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Check Collateral Repay Rate </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/market-data/Check-Collateral-Repay-Rate">Check
     *     Collateral Repay Rate(USER_DATA) Documentation</a>
     */
    public ApiResponse<CheckCollateralRepayRateStableRateResponse>
            checkCollateralRepayRateStableRate(
                    @NotNull String loanCoin,
                    @NotNull String collateralCoin,
                    @NotNull Double repayAmount,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                checkCollateralRepayRateStableRateValidateBeforeCall(
                        loanCoin, collateralCoin, repayAmount, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CheckCollateralRepayRateStableRateResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getCryptoLoansIncomeHistory
     *
     * @param asset (optional)
     * @param type All types will be returned by default. Enum：&#x60;borrowIn&#x60;
     *     ,&#x60;collateralSpent&#x60;, &#x60;repayAmount&#x60;,
     *     &#x60;collateralReturn&#x60;(Collateral return after repayment),
     *     &#x60;addCollateral&#x60;, &#x60;removeCollateral&#x60;,
     *     &#x60;collateralReturnAfterLiquidation&#x60; (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Crypto Loans Income History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/market-data/Get-Crypto-Loans-Income-History">Get
     *     Crypto Loans Income History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getCryptoLoansIncomeHistoryCall(
            String asset, String type, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/income";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCryptoLoansIncomeHistoryValidateBeforeCall(
            String asset, String type, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {asset, type, startTime, endTime, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getCryptoLoansIncomeHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<StableRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getCryptoLoansIncomeHistoryCall(
                        asset, type, startTime, endTime, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Crypto Loans Income History(USER_DATA) Get Crypto Loans Income History * If startTime and
     * endTime are not sent, the recent 7-day data will be returned. * The max interval between
     * startTime and endTime is 30 days. Weight: 6000
     *
     * @param asset (optional)
     * @param type All types will be returned by default. Enum：&#x60;borrowIn&#x60;
     *     ,&#x60;collateralSpent&#x60;, &#x60;repayAmount&#x60;,
     *     &#x60;collateralReturn&#x60;(Collateral return after repayment),
     *     &#x60;addCollateral&#x60;, &#x60;removeCollateral&#x60;,
     *     &#x60;collateralReturnAfterLiquidation&#x60; (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetCryptoLoansIncomeHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Crypto Loans Income History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/market-data/Get-Crypto-Loans-Income-History">Get
     *     Crypto Loans Income History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetCryptoLoansIncomeHistoryResponse> getCryptoLoansIncomeHistory(
            String asset, String type, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getCryptoLoansIncomeHistoryValidateBeforeCall(
                        asset, type, startTime, endTime, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetCryptoLoansIncomeHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getLoanBorrowHistory
     *
     * @param orderId orderId in &#x60;POST /sapi/v1/loan/borrow&#x60; (optional)
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Loan Borrow History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/user-information/Get-Loan-Borrow-History">Get
     *     Loan Borrow History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getLoanBorrowHistoryCall(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/borrow/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoanBorrowHistoryValidateBeforeCall(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getLoanBorrowHistory",
                                    Long.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<StableRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getLoanBorrowHistoryCall(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Loan Borrow History(USER_DATA) Get Loan Borrow History * If startTime and endTime are not
     * sent, the recent 90-day data will be returned. * The max interval between startTime and
     * endTime is 180 days. Weight: 400
     *
     * @param orderId orderId in &#x60;POST /sapi/v1/loan/borrow&#x60; (optional)
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetLoanBorrowHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Loan Borrow History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/user-information/Get-Loan-Borrow-History">Get
     *     Loan Borrow History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetLoanBorrowHistoryResponse> getLoanBorrowHistory(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getLoanBorrowHistoryValidateBeforeCall(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetLoanBorrowHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getLoanLtvAdjustmentHistory
     *
     * @param orderId orderId in &#x60;POST /sapi/v1/loan/borrow&#x60; (optional)
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Loan LTV Adjustment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/user-information/Get-Loan-LTV-Adjustment-History">Get
     *     Loan LTV Adjustment History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getLoanLtvAdjustmentHistoryCall(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/ltv/adjustment/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoanLtvAdjustmentHistoryValidateBeforeCall(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getLoanLtvAdjustmentHistory",
                                    Long.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<StableRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getLoanLtvAdjustmentHistoryCall(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Loan LTV Adjustment History(USER_DATA) Get Loan LTV Adjustment History * If startTime and
     * endTime are not sent, the recent 90-day data will be returned. * The max interval between
     * startTime and endTime is 180 days. Weight: 400
     *
     * @param orderId orderId in &#x60;POST /sapi/v1/loan/borrow&#x60; (optional)
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetLoanLtvAdjustmentHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Loan LTV Adjustment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/user-information/Get-Loan-LTV-Adjustment-History">Get
     *     Loan LTV Adjustment History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetLoanLtvAdjustmentHistoryResponse> getLoanLtvAdjustmentHistory(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getLoanLtvAdjustmentHistoryValidateBeforeCall(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetLoanLtvAdjustmentHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getLoanRepaymentHistory
     *
     * @param orderId orderId in &#x60;POST /sapi/v1/loan/borrow&#x60; (optional)
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Loan Repayment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/user-information/Get-Loan-Repayment-History">Get
     *     Loan Repayment History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getLoanRepaymentHistoryCall(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/repay/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoanRepaymentHistoryValidateBeforeCall(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getLoanRepaymentHistory",
                                    Long.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<StableRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getLoanRepaymentHistoryCall(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Loan Repayment History(USER_DATA) Get Loan Repayment History * If startTime and endTime
     * are not sent, the recent 90-day data will be returned. * The max interval between startTime
     * and endTime is 180 days. Weight: 400
     *
     * @param orderId orderId in &#x60;POST /sapi/v1/loan/borrow&#x60; (optional)
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetLoanRepaymentHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Loan Repayment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/stable-rate/user-information/Get-Loan-Repayment-History">Get
     *     Loan Repayment History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetLoanRepaymentHistoryResponse> getLoanRepaymentHistory(
            Long orderId,
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getLoanRepaymentHistoryValidateBeforeCall(
                        orderId,
                        loanCoin,
                        collateralCoin,
                        startTime,
                        endTime,
                        current,
                        limit,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetLoanRepaymentHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}

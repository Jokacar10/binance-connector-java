/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** MyFiltersResponseResult */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MyFiltersResponseResult extends BaseDTO {
    public static final String SERIALIZED_NAME_EXCHANGE_FILTERS = "exchangeFilters";

    @SerializedName(SERIALIZED_NAME_EXCHANGE_FILTERS)
    @jakarta.annotation.Nullable
    private List<ExchangeFilters> exchangeFilters;

    public static final String SERIALIZED_NAME_SYMBOL_FILTERS = "symbolFilters";

    @SerializedName(SERIALIZED_NAME_SYMBOL_FILTERS)
    @jakarta.annotation.Nullable
    private List<SymbolFilters> symbolFilters;

    public static final String SERIALIZED_NAME_ASSET_FILTERS = "assetFilters";

    @SerializedName(SERIALIZED_NAME_ASSET_FILTERS)
    @jakarta.annotation.Nullable
    private List<AssetFilters> assetFilters;

    public MyFiltersResponseResult() {}

    public MyFiltersResponseResult exchangeFilters(
            @jakarta.annotation.Nullable List<ExchangeFilters> exchangeFilters) {
        this.exchangeFilters = exchangeFilters;
        return this;
    }

    public MyFiltersResponseResult addExchangeFiltersItem(ExchangeFilters exchangeFiltersItem) {
        if (this.exchangeFilters == null) {
            this.exchangeFilters = new ArrayList<>();
        }
        this.exchangeFilters.add(exchangeFiltersItem);
        return this;
    }

    /**
     * Get exchangeFilters
     *
     * @return exchangeFilters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<ExchangeFilters> getExchangeFilters() {
        return exchangeFilters;
    }

    public void setExchangeFilters(
            @jakarta.annotation.Nullable List<ExchangeFilters> exchangeFilters) {
        this.exchangeFilters = exchangeFilters;
    }

    public MyFiltersResponseResult symbolFilters(
            @jakarta.annotation.Nullable List<SymbolFilters> symbolFilters) {
        this.symbolFilters = symbolFilters;
        return this;
    }

    public MyFiltersResponseResult addSymbolFiltersItem(SymbolFilters symbolFiltersItem) {
        if (this.symbolFilters == null) {
            this.symbolFilters = new ArrayList<>();
        }
        this.symbolFilters.add(symbolFiltersItem);
        return this;
    }

    /**
     * Get symbolFilters
     *
     * @return symbolFilters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<SymbolFilters> getSymbolFilters() {
        return symbolFilters;
    }

    public void setSymbolFilters(@jakarta.annotation.Nullable List<SymbolFilters> symbolFilters) {
        this.symbolFilters = symbolFilters;
    }

    public MyFiltersResponseResult assetFilters(
            @jakarta.annotation.Nullable List<AssetFilters> assetFilters) {
        this.assetFilters = assetFilters;
        return this;
    }

    public MyFiltersResponseResult addAssetFiltersItem(AssetFilters assetFiltersItem) {
        if (this.assetFilters == null) {
            this.assetFilters = new ArrayList<>();
        }
        this.assetFilters.add(assetFiltersItem);
        return this;
    }

    /**
     * Get assetFilters
     *
     * @return assetFilters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<AssetFilters> getAssetFilters() {
        return assetFilters;
    }

    public void setAssetFilters(@jakarta.annotation.Nullable List<AssetFilters> assetFilters) {
        this.assetFilters = assetFilters;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MyFiltersResponseResult myFiltersResponseResult = (MyFiltersResponseResult) o;
        return Objects.equals(this.exchangeFilters, myFiltersResponseResult.exchangeFilters)
                && Objects.equals(this.symbolFilters, myFiltersResponseResult.symbolFilters)
                && Objects.equals(this.assetFilters, myFiltersResponseResult.assetFilters);
    }

    @Override
    public int hashCode() {
        return Objects.hash(exchangeFilters, symbolFilters, assetFilters);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MyFiltersResponseResult {\n");
        sb.append("		exchangeFilters: ").append(toIndentedString(exchangeFilters)).append("\n");
        sb.append("		symbolFilters: ").append(toIndentedString(symbolFilters)).append("\n");
        sb.append("		assetFilters: ").append(toIndentedString(assetFilters)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        List<ExchangeFilters> exchangeFiltersValue = getExchangeFilters();
        if (exchangeFiltersValue != null) {
            String exchangeFiltersValueAsString = JSON.getGson().toJson(exchangeFiltersValue);
            valMap.put("exchangeFilters", exchangeFiltersValueAsString);
        }
        List<SymbolFilters> symbolFiltersValue = getSymbolFilters();
        if (symbolFiltersValue != null) {
            String symbolFiltersValueAsString = JSON.getGson().toJson(symbolFiltersValue);
            valMap.put("symbolFilters", symbolFiltersValueAsString);
        }
        List<AssetFilters> assetFiltersValue = getAssetFilters();
        if (assetFiltersValue != null) {
            String assetFiltersValueAsString = JSON.getGson().toJson(assetFiltersValue);
            valMap.put("assetFilters", assetFiltersValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object exchangeFiltersValue = getExchangeFilters();
        if (exchangeFiltersValue != null) {
            valMap.put("exchangeFilters", exchangeFiltersValue);
        }
        Object symbolFiltersValue = getSymbolFilters();
        if (symbolFiltersValue != null) {
            valMap.put("symbolFilters", symbolFiltersValue);
        }
        Object assetFiltersValue = getAssetFilters();
        if (assetFiltersValue != null) {
            valMap.put("assetFilters", assetFiltersValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("exchangeFilters");
        openapiFields.add("symbolFilters");
        openapiFields.add("assetFilters");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MyFiltersResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MyFiltersResponseResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MyFiltersResponseResult is not found"
                                        + " in the empty JSON string",
                                MyFiltersResponseResult.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MyFiltersResponseResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `MyFiltersResponseResult` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("exchangeFilters") != null
                && !jsonObj.get("exchangeFilters").isJsonNull()) {
            JsonArray jsonArrayexchangeFilters = jsonObj.getAsJsonArray("exchangeFilters");
            if (jsonArrayexchangeFilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("exchangeFilters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `exchangeFilters` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("exchangeFilters").toString()));
                }

                // validate the optional field `exchangeFilters` (array)
                for (int i = 0; i < jsonArrayexchangeFilters.size(); i++) {
                    ExchangeFilters.validateJsonElement(jsonArrayexchangeFilters.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("symbolFilters") != null && !jsonObj.get("symbolFilters").isJsonNull()) {
            JsonArray jsonArraysymbolFilters = jsonObj.getAsJsonArray("symbolFilters");
            if (jsonArraysymbolFilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("symbolFilters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `symbolFilters` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("symbolFilters").toString()));
                }

                // validate the optional field `symbolFilters` (array)
                for (int i = 0; i < jsonArraysymbolFilters.size(); i++) {
                    SymbolFilters.validateJsonElement(jsonArraysymbolFilters.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("assetFilters") != null && !jsonObj.get("assetFilters").isJsonNull()) {
            JsonArray jsonArrayassetFilters = jsonObj.getAsJsonArray("assetFilters");
            if (jsonArrayassetFilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assetFilters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assetFilters` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("assetFilters").toString()));
                }

                // validate the optional field `assetFilters` (array)
                for (int i = 0; i < jsonArrayassetFilters.size(); i++) {
                    AssetFilters.validateJsonElement(jsonArrayassetFilters.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MyFiltersResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MyFiltersResponseResult' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MyFiltersResponseResult> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(MyFiltersResponseResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MyFiltersResponseResult>() {
                        @Override
                        public void write(JsonWriter out, MyFiltersResponseResult value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MyFiltersResponseResult read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MyFiltersResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MyFiltersResponseResult
     * @throws IOException if the JSON string is invalid with respect to MyFiltersResponseResult
     */
    public static MyFiltersResponseResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MyFiltersResponseResult.class);
    }

    /**
     * Convert an instance of MyFiltersResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

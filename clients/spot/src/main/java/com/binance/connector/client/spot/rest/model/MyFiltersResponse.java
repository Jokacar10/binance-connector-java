/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** MyFiltersResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MyFiltersResponse {
    public static final String SERIALIZED_NAME_EXCHANGE_FILTERS = "exchangeFilters";

    @SerializedName(SERIALIZED_NAME_EXCHANGE_FILTERS)
    @jakarta.annotation.Nullable
    private List<ExchangeFilters> exchangeFilters;

    public static final String SERIALIZED_NAME_SYMBOL_FILTERS = "symbolFilters";

    @SerializedName(SERIALIZED_NAME_SYMBOL_FILTERS)
    @jakarta.annotation.Nullable
    private List<SymbolFilters> symbolFilters;

    public static final String SERIALIZED_NAME_ASSET_FILTERS = "assetFilters";

    @SerializedName(SERIALIZED_NAME_ASSET_FILTERS)
    @jakarta.annotation.Nullable
    private List<AssetFilters> assetFilters;

    public static final String SERIALIZED_NAME_RATE_LIMITS = "rateLimits";

    @SerializedName(SERIALIZED_NAME_RATE_LIMITS)
    @jakarta.annotation.Nullable
    private List<@Valid RateLimits> rateLimits;

    public MyFiltersResponse() {}

    public MyFiltersResponse exchangeFilters(
            @jakarta.annotation.Nullable List<ExchangeFilters> exchangeFilters) {
        this.exchangeFilters = exchangeFilters;
        return this;
    }

    public MyFiltersResponse addExchangeFiltersItem(ExchangeFilters exchangeFiltersItem) {
        if (this.exchangeFilters == null) {
            this.exchangeFilters = new ArrayList<>();
        }
        this.exchangeFilters.add(exchangeFiltersItem);
        return this;
    }

    /**
     * Get exchangeFilters
     *
     * @return exchangeFilters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<ExchangeFilters> getExchangeFilters() {
        return exchangeFilters;
    }

    public void setExchangeFilters(
            @jakarta.annotation.Nullable List<ExchangeFilters> exchangeFilters) {
        this.exchangeFilters = exchangeFilters;
    }

    public MyFiltersResponse symbolFilters(
            @jakarta.annotation.Nullable List<SymbolFilters> symbolFilters) {
        this.symbolFilters = symbolFilters;
        return this;
    }

    public MyFiltersResponse addSymbolFiltersItem(SymbolFilters symbolFiltersItem) {
        if (this.symbolFilters == null) {
            this.symbolFilters = new ArrayList<>();
        }
        this.symbolFilters.add(symbolFiltersItem);
        return this;
    }

    /**
     * Get symbolFilters
     *
     * @return symbolFilters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<SymbolFilters> getSymbolFilters() {
        return symbolFilters;
    }

    public void setSymbolFilters(@jakarta.annotation.Nullable List<SymbolFilters> symbolFilters) {
        this.symbolFilters = symbolFilters;
    }

    public MyFiltersResponse assetFilters(
            @jakarta.annotation.Nullable List<AssetFilters> assetFilters) {
        this.assetFilters = assetFilters;
        return this;
    }

    public MyFiltersResponse addAssetFiltersItem(AssetFilters assetFiltersItem) {
        if (this.assetFilters == null) {
            this.assetFilters = new ArrayList<>();
        }
        this.assetFilters.add(assetFiltersItem);
        return this;
    }

    /**
     * Get assetFilters
     *
     * @return assetFilters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<AssetFilters> getAssetFilters() {
        return assetFilters;
    }

    public void setAssetFilters(@jakarta.annotation.Nullable List<AssetFilters> assetFilters) {
        this.assetFilters = assetFilters;
    }

    public MyFiltersResponse rateLimits(
            @jakarta.annotation.Nullable List<@Valid RateLimits> rateLimits) {
        this.rateLimits = rateLimits;
        return this;
    }

    public MyFiltersResponse addRateLimitsItem(RateLimits rateLimitsItem) {
        if (this.rateLimits == null) {
            this.rateLimits = new ArrayList<>();
        }
        this.rateLimits.add(rateLimitsItem);
        return this;
    }

    /**
     * Get rateLimits
     *
     * @return rateLimits
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid RateLimits> getRateLimits() {
        return rateLimits;
    }

    public void setRateLimits(@jakarta.annotation.Nullable List<@Valid RateLimits> rateLimits) {
        this.rateLimits = rateLimits;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MyFiltersResponse myFiltersResponse = (MyFiltersResponse) o;
        return Objects.equals(this.exchangeFilters, myFiltersResponse.exchangeFilters)
                && Objects.equals(this.symbolFilters, myFiltersResponse.symbolFilters)
                && Objects.equals(this.assetFilters, myFiltersResponse.assetFilters)
                && Objects.equals(this.rateLimits, myFiltersResponse.rateLimits);
    }

    @Override
    public int hashCode() {
        return Objects.hash(exchangeFilters, symbolFilters, assetFilters, rateLimits);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MyFiltersResponse {\n");
        sb.append("		exchangeFilters: ").append(toIndentedString(exchangeFilters)).append("\n");
        sb.append("		symbolFilters: ").append(toIndentedString(symbolFilters)).append("\n");
        sb.append("		assetFilters: ").append(toIndentedString(assetFilters)).append("\n");
        sb.append("		rateLimits: ").append(toIndentedString(rateLimits)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object exchangeFiltersValue = getExchangeFilters();
        String exchangeFiltersValueAsString = "";
        exchangeFiltersValueAsString =
                (String)
                        ((Collection) exchangeFiltersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("exchangeFilters=").append(urlEncode(exchangeFiltersValueAsString)).append("");
        Object symbolFiltersValue = getSymbolFilters();
        String symbolFiltersValueAsString = "";
        symbolFiltersValueAsString =
                (String)
                        ((Collection) symbolFiltersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("symbolFilters=").append(urlEncode(symbolFiltersValueAsString)).append("");
        Object assetFiltersValue = getAssetFilters();
        String assetFiltersValueAsString = "";
        assetFiltersValueAsString =
                (String)
                        ((Collection) assetFiltersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assetFilters=").append(urlEncode(assetFiltersValueAsString)).append("");
        Object rateLimitsValue = getRateLimits();
        String rateLimitsValueAsString = "";
        rateLimitsValueAsString =
                (String)
                        ((Collection) rateLimitsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("rateLimits=").append(urlEncode(rateLimitsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("exchangeFilters");
        openapiFields.add("symbolFilters");
        openapiFields.add("assetFilters");
        openapiFields.add("rateLimits");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MyFiltersResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MyFiltersResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MyFiltersResponse is not found in the"
                                        + " empty JSON string",
                                MyFiltersResponse.openapiRequiredFields.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("exchangeFilters") != null
                && !jsonObj.get("exchangeFilters").isJsonNull()) {
            JsonArray jsonArrayexchangeFilters = jsonObj.getAsJsonArray("exchangeFilters");
            if (jsonArrayexchangeFilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("exchangeFilters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `exchangeFilters` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("exchangeFilters").toString()));
                }

                // validate the optional field `exchangeFilters` (array)
                for (int i = 0; i < jsonArrayexchangeFilters.size(); i++) {
                    ExchangeFilters.validateJsonElement(jsonArrayexchangeFilters.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("symbolFilters") != null && !jsonObj.get("symbolFilters").isJsonNull()) {
            JsonArray jsonArraysymbolFilters = jsonObj.getAsJsonArray("symbolFilters");
            if (jsonArraysymbolFilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("symbolFilters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `symbolFilters` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("symbolFilters").toString()));
                }

                // validate the optional field `symbolFilters` (array)
                for (int i = 0; i < jsonArraysymbolFilters.size(); i++) {
                    SymbolFilters.validateJsonElement(jsonArraysymbolFilters.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("assetFilters") != null && !jsonObj.get("assetFilters").isJsonNull()) {
            JsonArray jsonArrayassetFilters = jsonObj.getAsJsonArray("assetFilters");
            if (jsonArrayassetFilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assetFilters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assetFilters` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("assetFilters").toString()));
                }

                // validate the optional field `assetFilters` (array)
                for (int i = 0; i < jsonArrayassetFilters.size(); i++) {
                    AssetFilters.validateJsonElement(jsonArrayassetFilters.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("rateLimits") != null && !jsonObj.get("rateLimits").isJsonNull()) {
            JsonArray jsonArrayrateLimits = jsonObj.getAsJsonArray("rateLimits");
            if (jsonArrayrateLimits != null) {
                // ensure the json data is an array
                if (!jsonObj.get("rateLimits").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `rateLimits` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("rateLimits").toString()));
                }

                // validate the optional field `rateLimits` (array)
                for (int i = 0; i < jsonArrayrateLimits.size(); i++) {
                    RateLimits.validateJsonElement(jsonArrayrateLimits.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MyFiltersResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MyFiltersResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MyFiltersResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(MyFiltersResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MyFiltersResponse>() {
                        @Override
                        public void write(JsonWriter out, MyFiltersResponse value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MyFiltersResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MyFiltersResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MyFiltersResponse
     * @throws IOException if the JSON string is invalid with respect to MyFiltersResponse
     */
    public static MyFiltersResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MyFiltersResponse.class);
    }

    /**
     * Convert an instance of MyFiltersResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

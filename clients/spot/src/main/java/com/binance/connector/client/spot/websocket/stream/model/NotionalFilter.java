/*
 * Binance Spot WebSocket Streams
 * OpenAPI Specifications for the Binance Spot WebSocket Streams  API documents:   - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)   - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** NotionalFilter */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NotionalFilter extends BaseDTO {
    public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";

    @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
    @jakarta.annotation.Nullable
    private String filterType;

    public static final String SERIALIZED_NAME_PRICE_EXPONENT = "priceExponent";

    @SerializedName(SERIALIZED_NAME_PRICE_EXPONENT)
    @jakarta.annotation.Nullable
    private Integer priceExponent;

    public static final String SERIALIZED_NAME_MIN_NOTIONAL = "minNotional";

    @SerializedName(SERIALIZED_NAME_MIN_NOTIONAL)
    @jakarta.annotation.Nullable
    private String minNotional;

    public static final String SERIALIZED_NAME_APPLY_MIN_TO_MARKET = "applyMinToMarket";

    @SerializedName(SERIALIZED_NAME_APPLY_MIN_TO_MARKET)
    @jakarta.annotation.Nullable
    private Boolean applyMinToMarket;

    public static final String SERIALIZED_NAME_MAX_NOTIONAL = "maxNotional";

    @SerializedName(SERIALIZED_NAME_MAX_NOTIONAL)
    @jakarta.annotation.Nullable
    private String maxNotional;

    public static final String SERIALIZED_NAME_APPLY_MAX_TO_MARKET = "applyMaxToMarket";

    @SerializedName(SERIALIZED_NAME_APPLY_MAX_TO_MARKET)
    @jakarta.annotation.Nullable
    private Boolean applyMaxToMarket;

    public static final String SERIALIZED_NAME_AVG_PRICE_MINS = "avgPriceMins";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE_MINS)
    @jakarta.annotation.Nullable
    private Integer avgPriceMins;

    public NotionalFilter() {}

    public NotionalFilter filterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
        return this;
    }

    /**
     * Get filterType
     *
     * @return filterType
     */
    @jakarta.annotation.Nullable
    public String getFilterType() {
        return filterType;
    }

    public void setFilterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
    }

    public NotionalFilter priceExponent(@jakarta.annotation.Nullable Integer priceExponent) {
        this.priceExponent = priceExponent;
        return this;
    }

    /**
     * Get priceExponent
     *
     * @return priceExponent
     */
    @jakarta.annotation.Nullable
    public Integer getPriceExponent() {
        return priceExponent;
    }

    public void setPriceExponent(@jakarta.annotation.Nullable Integer priceExponent) {
        this.priceExponent = priceExponent;
    }

    public NotionalFilter minNotional(@jakarta.annotation.Nullable String minNotional) {
        this.minNotional = minNotional;
        return this;
    }

    /**
     * Get minNotional
     *
     * @return minNotional
     */
    @jakarta.annotation.Nullable
    public String getMinNotional() {
        return minNotional;
    }

    public void setMinNotional(@jakarta.annotation.Nullable String minNotional) {
        this.minNotional = minNotional;
    }

    public NotionalFilter applyMinToMarket(@jakarta.annotation.Nullable Boolean applyMinToMarket) {
        this.applyMinToMarket = applyMinToMarket;
        return this;
    }

    /**
     * Get applyMinToMarket
     *
     * @return applyMinToMarket
     */
    @jakarta.annotation.Nullable
    public Boolean getApplyMinToMarket() {
        return applyMinToMarket;
    }

    public void setApplyMinToMarket(@jakarta.annotation.Nullable Boolean applyMinToMarket) {
        this.applyMinToMarket = applyMinToMarket;
    }

    public NotionalFilter maxNotional(@jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
        return this;
    }

    /**
     * Get maxNotional
     *
     * @return maxNotional
     */
    @jakarta.annotation.Nullable
    public String getMaxNotional() {
        return maxNotional;
    }

    public void setMaxNotional(@jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
    }

    public NotionalFilter applyMaxToMarket(@jakarta.annotation.Nullable Boolean applyMaxToMarket) {
        this.applyMaxToMarket = applyMaxToMarket;
        return this;
    }

    /**
     * Get applyMaxToMarket
     *
     * @return applyMaxToMarket
     */
    @jakarta.annotation.Nullable
    public Boolean getApplyMaxToMarket() {
        return applyMaxToMarket;
    }

    public void setApplyMaxToMarket(@jakarta.annotation.Nullable Boolean applyMaxToMarket) {
        this.applyMaxToMarket = applyMaxToMarket;
    }

    public NotionalFilter avgPriceMins(@jakarta.annotation.Nullable Integer avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
        return this;
    }

    /**
     * Get avgPriceMins
     *
     * @return avgPriceMins
     */
    @jakarta.annotation.Nullable
    public Integer getAvgPriceMins() {
        return avgPriceMins;
    }

    public void setAvgPriceMins(@jakarta.annotation.Nullable Integer avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotionalFilter notionalFilter = (NotionalFilter) o;
        return Objects.equals(this.filterType, notionalFilter.filterType)
                && Objects.equals(this.priceExponent, notionalFilter.priceExponent)
                && Objects.equals(this.minNotional, notionalFilter.minNotional)
                && Objects.equals(this.applyMinToMarket, notionalFilter.applyMinToMarket)
                && Objects.equals(this.maxNotional, notionalFilter.maxNotional)
                && Objects.equals(this.applyMaxToMarket, notionalFilter.applyMaxToMarket)
                && Objects.equals(this.avgPriceMins, notionalFilter.avgPriceMins);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                filterType,
                priceExponent,
                minNotional,
                applyMinToMarket,
                maxNotional,
                applyMaxToMarket,
                avgPriceMins);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotionalFilter {\n");
        sb.append("		filterType: ").append(toIndentedString(filterType)).append("\n");
        sb.append("		priceExponent: ").append(toIndentedString(priceExponent)).append("\n");
        sb.append("		minNotional: ").append(toIndentedString(minNotional)).append("\n");
        sb.append("		applyMinToMarket: ").append(toIndentedString(applyMinToMarket)).append("\n");
        sb.append("		maxNotional: ").append(toIndentedString(maxNotional)).append("\n");
        sb.append("		applyMaxToMarket: ").append(toIndentedString(applyMaxToMarket)).append("\n");
        sb.append("		avgPriceMins: ").append(toIndentedString(avgPriceMins)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String filterTypeValue = getFilterType();
        if (filterTypeValue != null) {
            String filterTypeValueAsString = filterTypeValue.toString();
            valMap.put("filterType", filterTypeValueAsString);
        }
        Integer priceExponentValue = getPriceExponent();
        if (priceExponentValue != null) {
            String priceExponentValueAsString = priceExponentValue.toString();
            valMap.put("priceExponent", priceExponentValueAsString);
        }
        String minNotionalValue = getMinNotional();
        if (minNotionalValue != null) {
            String minNotionalValueAsString = minNotionalValue.toString();
            valMap.put("minNotional", minNotionalValueAsString);
        }
        Boolean applyMinToMarketValue = getApplyMinToMarket();
        if (applyMinToMarketValue != null) {
            String applyMinToMarketValueAsString = applyMinToMarketValue.toString();
            valMap.put("applyMinToMarket", applyMinToMarketValueAsString);
        }
        String maxNotionalValue = getMaxNotional();
        if (maxNotionalValue != null) {
            String maxNotionalValueAsString = maxNotionalValue.toString();
            valMap.put("maxNotional", maxNotionalValueAsString);
        }
        Boolean applyMaxToMarketValue = getApplyMaxToMarket();
        if (applyMaxToMarketValue != null) {
            String applyMaxToMarketValueAsString = applyMaxToMarketValue.toString();
            valMap.put("applyMaxToMarket", applyMaxToMarketValueAsString);
        }
        Integer avgPriceMinsValue = getAvgPriceMins();
        if (avgPriceMinsValue != null) {
            String avgPriceMinsValueAsString = avgPriceMinsValue.toString();
            valMap.put("avgPriceMins", avgPriceMinsValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object filterTypeValue = getFilterType();
        if (filterTypeValue != null) {
            valMap.put("filterType", filterTypeValue);
        }
        Object priceExponentValue = getPriceExponent();
        if (priceExponentValue != null) {
            valMap.put("priceExponent", priceExponentValue);
        }
        Object minNotionalValue = getMinNotional();
        if (minNotionalValue != null) {
            valMap.put("minNotional", minNotionalValue);
        }
        Object applyMinToMarketValue = getApplyMinToMarket();
        if (applyMinToMarketValue != null) {
            valMap.put("applyMinToMarket", applyMinToMarketValue);
        }
        Object maxNotionalValue = getMaxNotional();
        if (maxNotionalValue != null) {
            valMap.put("maxNotional", maxNotionalValue);
        }
        Object applyMaxToMarketValue = getApplyMaxToMarket();
        if (applyMaxToMarketValue != null) {
            valMap.put("applyMaxToMarket", applyMaxToMarketValue);
        }
        Object avgPriceMinsValue = getAvgPriceMins();
        if (avgPriceMinsValue != null) {
            valMap.put("avgPriceMins", avgPriceMinsValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("filterType");
        openapiFields.add("priceExponent");
        openapiFields.add("minNotional");
        openapiFields.add("applyMinToMarket");
        openapiFields.add("maxNotional");
        openapiFields.add("applyMaxToMarket");
        openapiFields.add("avgPriceMins");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NotionalFilter
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NotionalFilter.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in NotionalFilter is not found in the"
                                        + " empty JSON string",
                                NotionalFilter.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NotionalFilter.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `NotionalFilter` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull())
                && !jsonObj.get("filterType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `filterType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("filterType").toString()));
        }
        if ((jsonObj.get("minNotional") != null && !jsonObj.get("minNotional").isJsonNull())
                && !jsonObj.get("minNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("minNotional").toString()));
        }
        if ((jsonObj.get("maxNotional") != null && !jsonObj.get("maxNotional").isJsonNull())
                && !jsonObj.get("maxNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxNotional").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotionalFilter.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NotionalFilter' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NotionalFilter> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(NotionalFilter.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NotionalFilter>() {
                        @Override
                        public void write(JsonWriter out, NotionalFilter value) throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NotionalFilter read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NotionalFilter given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NotionalFilter
     * @throws IOException if the JSON string is invalid with respect to NotionalFilter
     */
    public static NotionalFilter fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NotionalFilter.class);
    }

    /**
     * Convert an instance of NotionalFilter to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

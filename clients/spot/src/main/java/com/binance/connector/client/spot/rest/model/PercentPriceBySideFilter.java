/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** PercentPriceBySideFilter */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class PercentPriceBySideFilter {
    public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";

    @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
    @jakarta.annotation.Nullable
    private String filterType;

    public static final String SERIALIZED_NAME_MULTIPLIER_EXPONENT = "multiplierExponent";

    @SerializedName(SERIALIZED_NAME_MULTIPLIER_EXPONENT)
    @jakarta.annotation.Nullable
    private Integer multiplierExponent;

    public static final String SERIALIZED_NAME_BID_MULTIPLIER_UP = "bidMultiplierUp";

    @SerializedName(SERIALIZED_NAME_BID_MULTIPLIER_UP)
    @jakarta.annotation.Nullable
    private String bidMultiplierUp;

    public static final String SERIALIZED_NAME_BID_MULTIPLIER_DOWN = "bidMultiplierDown";

    @SerializedName(SERIALIZED_NAME_BID_MULTIPLIER_DOWN)
    @jakarta.annotation.Nullable
    private String bidMultiplierDown;

    public static final String SERIALIZED_NAME_ASK_MULTIPLIER_UP = "askMultiplierUp";

    @SerializedName(SERIALIZED_NAME_ASK_MULTIPLIER_UP)
    @jakarta.annotation.Nullable
    private String askMultiplierUp;

    public static final String SERIALIZED_NAME_ASK_MULTIPLIER_DOWN = "askMultiplierDown";

    @SerializedName(SERIALIZED_NAME_ASK_MULTIPLIER_DOWN)
    @jakarta.annotation.Nullable
    private String askMultiplierDown;

    public static final String SERIALIZED_NAME_AVG_PRICE_MINS = "avgPriceMins";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE_MINS)
    @jakarta.annotation.Nullable
    private Integer avgPriceMins;

    public PercentPriceBySideFilter() {}

    public PercentPriceBySideFilter filterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
        return this;
    }

    /**
     * Get filterType
     *
     * @return filterType
     */
    @jakarta.annotation.Nullable
    public String getFilterType() {
        return filterType;
    }

    public void setFilterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
    }

    public PercentPriceBySideFilter multiplierExponent(
            @jakarta.annotation.Nullable Integer multiplierExponent) {
        this.multiplierExponent = multiplierExponent;
        return this;
    }

    /**
     * Get multiplierExponent
     *
     * @return multiplierExponent
     */
    @jakarta.annotation.Nullable
    public Integer getMultiplierExponent() {
        return multiplierExponent;
    }

    public void setMultiplierExponent(@jakarta.annotation.Nullable Integer multiplierExponent) {
        this.multiplierExponent = multiplierExponent;
    }

    public PercentPriceBySideFilter bidMultiplierUp(
            @jakarta.annotation.Nullable String bidMultiplierUp) {
        this.bidMultiplierUp = bidMultiplierUp;
        return this;
    }

    /**
     * Get bidMultiplierUp
     *
     * @return bidMultiplierUp
     */
    @jakarta.annotation.Nullable
    public String getBidMultiplierUp() {
        return bidMultiplierUp;
    }

    public void setBidMultiplierUp(@jakarta.annotation.Nullable String bidMultiplierUp) {
        this.bidMultiplierUp = bidMultiplierUp;
    }

    public PercentPriceBySideFilter bidMultiplierDown(
            @jakarta.annotation.Nullable String bidMultiplierDown) {
        this.bidMultiplierDown = bidMultiplierDown;
        return this;
    }

    /**
     * Get bidMultiplierDown
     *
     * @return bidMultiplierDown
     */
    @jakarta.annotation.Nullable
    public String getBidMultiplierDown() {
        return bidMultiplierDown;
    }

    public void setBidMultiplierDown(@jakarta.annotation.Nullable String bidMultiplierDown) {
        this.bidMultiplierDown = bidMultiplierDown;
    }

    public PercentPriceBySideFilter askMultiplierUp(
            @jakarta.annotation.Nullable String askMultiplierUp) {
        this.askMultiplierUp = askMultiplierUp;
        return this;
    }

    /**
     * Get askMultiplierUp
     *
     * @return askMultiplierUp
     */
    @jakarta.annotation.Nullable
    public String getAskMultiplierUp() {
        return askMultiplierUp;
    }

    public void setAskMultiplierUp(@jakarta.annotation.Nullable String askMultiplierUp) {
        this.askMultiplierUp = askMultiplierUp;
    }

    public PercentPriceBySideFilter askMultiplierDown(
            @jakarta.annotation.Nullable String askMultiplierDown) {
        this.askMultiplierDown = askMultiplierDown;
        return this;
    }

    /**
     * Get askMultiplierDown
     *
     * @return askMultiplierDown
     */
    @jakarta.annotation.Nullable
    public String getAskMultiplierDown() {
        return askMultiplierDown;
    }

    public void setAskMultiplierDown(@jakarta.annotation.Nullable String askMultiplierDown) {
        this.askMultiplierDown = askMultiplierDown;
    }

    public PercentPriceBySideFilter avgPriceMins(
            @jakarta.annotation.Nullable Integer avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
        return this;
    }

    /**
     * Get avgPriceMins
     *
     * @return avgPriceMins
     */
    @jakarta.annotation.Nullable
    public Integer getAvgPriceMins() {
        return avgPriceMins;
    }

    public void setAvgPriceMins(@jakarta.annotation.Nullable Integer avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PercentPriceBySideFilter percentPriceBySideFilter = (PercentPriceBySideFilter) o;
        return Objects.equals(this.filterType, percentPriceBySideFilter.filterType)
                && Objects.equals(
                        this.multiplierExponent, percentPriceBySideFilter.multiplierExponent)
                && Objects.equals(this.bidMultiplierUp, percentPriceBySideFilter.bidMultiplierUp)
                && Objects.equals(
                        this.bidMultiplierDown, percentPriceBySideFilter.bidMultiplierDown)
                && Objects.equals(this.askMultiplierUp, percentPriceBySideFilter.askMultiplierUp)
                && Objects.equals(
                        this.askMultiplierDown, percentPriceBySideFilter.askMultiplierDown)
                && Objects.equals(this.avgPriceMins, percentPriceBySideFilter.avgPriceMins);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                filterType,
                multiplierExponent,
                bidMultiplierUp,
                bidMultiplierDown,
                askMultiplierUp,
                askMultiplierDown,
                avgPriceMins);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PercentPriceBySideFilter {\n");
        sb.append("		filterType: ").append(toIndentedString(filterType)).append("\n");
        sb.append("		multiplierExponent: ")
                .append(toIndentedString(multiplierExponent))
                .append("\n");
        sb.append("		bidMultiplierUp: ").append(toIndentedString(bidMultiplierUp)).append("\n");
        sb.append("		bidMultiplierDown: ").append(toIndentedString(bidMultiplierDown)).append("\n");
        sb.append("		askMultiplierUp: ").append(toIndentedString(askMultiplierUp)).append("\n");
        sb.append("		askMultiplierDown: ").append(toIndentedString(askMultiplierDown)).append("\n");
        sb.append("		avgPriceMins: ").append(toIndentedString(avgPriceMins)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object filterTypeValue = getFilterType();
        String filterTypeValueAsString = "";
        filterTypeValueAsString = filterTypeValue.toString();
        sb.append("filterType=").append(urlEncode(filterTypeValueAsString)).append("");
        Object multiplierExponentValue = getMultiplierExponent();
        String multiplierExponentValueAsString = "";
        multiplierExponentValueAsString = multiplierExponentValue.toString();
        sb.append("multiplierExponent=")
                .append(urlEncode(multiplierExponentValueAsString))
                .append("");
        Object bidMultiplierUpValue = getBidMultiplierUp();
        String bidMultiplierUpValueAsString = "";
        bidMultiplierUpValueAsString = bidMultiplierUpValue.toString();
        sb.append("bidMultiplierUp=").append(urlEncode(bidMultiplierUpValueAsString)).append("");
        Object bidMultiplierDownValue = getBidMultiplierDown();
        String bidMultiplierDownValueAsString = "";
        bidMultiplierDownValueAsString = bidMultiplierDownValue.toString();
        sb.append("bidMultiplierDown=")
                .append(urlEncode(bidMultiplierDownValueAsString))
                .append("");
        Object askMultiplierUpValue = getAskMultiplierUp();
        String askMultiplierUpValueAsString = "";
        askMultiplierUpValueAsString = askMultiplierUpValue.toString();
        sb.append("askMultiplierUp=").append(urlEncode(askMultiplierUpValueAsString)).append("");
        Object askMultiplierDownValue = getAskMultiplierDown();
        String askMultiplierDownValueAsString = "";
        askMultiplierDownValueAsString = askMultiplierDownValue.toString();
        sb.append("askMultiplierDown=")
                .append(urlEncode(askMultiplierDownValueAsString))
                .append("");
        Object avgPriceMinsValue = getAvgPriceMins();
        String avgPriceMinsValueAsString = "";
        avgPriceMinsValueAsString = avgPriceMinsValue.toString();
        sb.append("avgPriceMins=").append(urlEncode(avgPriceMinsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("filterType");
        openapiFields.add("multiplierExponent");
        openapiFields.add("bidMultiplierUp");
        openapiFields.add("bidMultiplierDown");
        openapiFields.add("askMultiplierUp");
        openapiFields.add("askMultiplierDown");
        openapiFields.add("avgPriceMins");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PercentPriceBySideFilter
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PercentPriceBySideFilter.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PercentPriceBySideFilter is not found"
                                        + " in the empty JSON string",
                                PercentPriceBySideFilter.openapiRequiredFields.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull())
                && !jsonObj.get("filterType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `filterType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("filterType").toString()));
        }
        if ((jsonObj.get("bidMultiplierUp") != null && !jsonObj.get("bidMultiplierUp").isJsonNull())
                && !jsonObj.get("bidMultiplierUp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidMultiplierUp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("bidMultiplierUp").toString()));
        }
        if ((jsonObj.get("bidMultiplierDown") != null
                        && !jsonObj.get("bidMultiplierDown").isJsonNull())
                && !jsonObj.get("bidMultiplierDown").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidMultiplierDown` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("bidMultiplierDown").toString()));
        }
        if ((jsonObj.get("askMultiplierUp") != null && !jsonObj.get("askMultiplierUp").isJsonNull())
                && !jsonObj.get("askMultiplierUp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askMultiplierUp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("askMultiplierUp").toString()));
        }
        if ((jsonObj.get("askMultiplierDown") != null
                        && !jsonObj.get("askMultiplierDown").isJsonNull())
                && !jsonObj.get("askMultiplierDown").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askMultiplierDown` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("askMultiplierDown").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PercentPriceBySideFilter.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PercentPriceBySideFilter' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PercentPriceBySideFilter> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PercentPriceBySideFilter.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PercentPriceBySideFilter>() {
                        @Override
                        public void write(JsonWriter out, PercentPriceBySideFilter value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PercentPriceBySideFilter read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PercentPriceBySideFilter given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PercentPriceBySideFilter
     * @throws IOException if the JSON string is invalid with respect to PercentPriceBySideFilter
     */
    public static PercentPriceBySideFilter fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PercentPriceBySideFilter.class);
    }

    /**
     * Convert an instance of PercentPriceBySideFilter to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

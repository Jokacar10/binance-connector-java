/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** PercentPriceFilter */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class PercentPriceFilter {
    public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";

    @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
    @jakarta.annotation.Nullable
    private String filterType;

    public static final String SERIALIZED_NAME_MULTIPLIER_EXPONENT = "multiplierExponent";

    @SerializedName(SERIALIZED_NAME_MULTIPLIER_EXPONENT)
    @jakarta.annotation.Nullable
    private Integer multiplierExponent;

    public static final String SERIALIZED_NAME_MULTIPLIER_UP = "multiplierUp";

    @SerializedName(SERIALIZED_NAME_MULTIPLIER_UP)
    @jakarta.annotation.Nullable
    private String multiplierUp;

    public static final String SERIALIZED_NAME_MULTIPLIER_DOWN = "multiplierDown";

    @SerializedName(SERIALIZED_NAME_MULTIPLIER_DOWN)
    @jakarta.annotation.Nullable
    private String multiplierDown;

    public static final String SERIALIZED_NAME_AVG_PRICE_MINS = "avgPriceMins";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE_MINS)
    @jakarta.annotation.Nullable
    private Integer avgPriceMins;

    public PercentPriceFilter() {}

    public PercentPriceFilter filterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
        return this;
    }

    /**
     * Get filterType
     *
     * @return filterType
     */
    @jakarta.annotation.Nullable
    public String getFilterType() {
        return filterType;
    }

    public void setFilterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
    }

    public PercentPriceFilter multiplierExponent(
            @jakarta.annotation.Nullable Integer multiplierExponent) {
        this.multiplierExponent = multiplierExponent;
        return this;
    }

    /**
     * Get multiplierExponent
     *
     * @return multiplierExponent
     */
    @jakarta.annotation.Nullable
    public Integer getMultiplierExponent() {
        return multiplierExponent;
    }

    public void setMultiplierExponent(@jakarta.annotation.Nullable Integer multiplierExponent) {
        this.multiplierExponent = multiplierExponent;
    }

    public PercentPriceFilter multiplierUp(@jakarta.annotation.Nullable String multiplierUp) {
        this.multiplierUp = multiplierUp;
        return this;
    }

    /**
     * Get multiplierUp
     *
     * @return multiplierUp
     */
    @jakarta.annotation.Nullable
    public String getMultiplierUp() {
        return multiplierUp;
    }

    public void setMultiplierUp(@jakarta.annotation.Nullable String multiplierUp) {
        this.multiplierUp = multiplierUp;
    }

    public PercentPriceFilter multiplierDown(@jakarta.annotation.Nullable String multiplierDown) {
        this.multiplierDown = multiplierDown;
        return this;
    }

    /**
     * Get multiplierDown
     *
     * @return multiplierDown
     */
    @jakarta.annotation.Nullable
    public String getMultiplierDown() {
        return multiplierDown;
    }

    public void setMultiplierDown(@jakarta.annotation.Nullable String multiplierDown) {
        this.multiplierDown = multiplierDown;
    }

    public PercentPriceFilter avgPriceMins(@jakarta.annotation.Nullable Integer avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
        return this;
    }

    /**
     * Get avgPriceMins
     *
     * @return avgPriceMins
     */
    @jakarta.annotation.Nullable
    public Integer getAvgPriceMins() {
        return avgPriceMins;
    }

    public void setAvgPriceMins(@jakarta.annotation.Nullable Integer avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PercentPriceFilter percentPriceFilter = (PercentPriceFilter) o;
        return Objects.equals(this.filterType, percentPriceFilter.filterType)
                && Objects.equals(this.multiplierExponent, percentPriceFilter.multiplierExponent)
                && Objects.equals(this.multiplierUp, percentPriceFilter.multiplierUp)
                && Objects.equals(this.multiplierDown, percentPriceFilter.multiplierDown)
                && Objects.equals(this.avgPriceMins, percentPriceFilter.avgPriceMins);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                filterType, multiplierExponent, multiplierUp, multiplierDown, avgPriceMins);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PercentPriceFilter {\n");
        sb.append("		filterType: ").append(toIndentedString(filterType)).append("\n");
        sb.append("		multiplierExponent: ")
                .append(toIndentedString(multiplierExponent))
                .append("\n");
        sb.append("		multiplierUp: ").append(toIndentedString(multiplierUp)).append("\n");
        sb.append("		multiplierDown: ").append(toIndentedString(multiplierDown)).append("\n");
        sb.append("		avgPriceMins: ").append(toIndentedString(avgPriceMins)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object filterTypeValue = getFilterType();
        String filterTypeValueAsString = "";
        filterTypeValueAsString = filterTypeValue.toString();
        sb.append("filterType=").append(urlEncode(filterTypeValueAsString)).append("");
        Object multiplierExponentValue = getMultiplierExponent();
        String multiplierExponentValueAsString = "";
        multiplierExponentValueAsString = multiplierExponentValue.toString();
        sb.append("multiplierExponent=")
                .append(urlEncode(multiplierExponentValueAsString))
                .append("");
        Object multiplierUpValue = getMultiplierUp();
        String multiplierUpValueAsString = "";
        multiplierUpValueAsString = multiplierUpValue.toString();
        sb.append("multiplierUp=").append(urlEncode(multiplierUpValueAsString)).append("");
        Object multiplierDownValue = getMultiplierDown();
        String multiplierDownValueAsString = "";
        multiplierDownValueAsString = multiplierDownValue.toString();
        sb.append("multiplierDown=").append(urlEncode(multiplierDownValueAsString)).append("");
        Object avgPriceMinsValue = getAvgPriceMins();
        String avgPriceMinsValueAsString = "";
        avgPriceMinsValueAsString = avgPriceMinsValue.toString();
        sb.append("avgPriceMins=").append(urlEncode(avgPriceMinsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("filterType");
        openapiFields.add("multiplierExponent");
        openapiFields.add("multiplierUp");
        openapiFields.add("multiplierDown");
        openapiFields.add("avgPriceMins");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PercentPriceFilter
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PercentPriceFilter.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PercentPriceFilter is not found in the"
                                        + " empty JSON string",
                                PercentPriceFilter.openapiRequiredFields.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull())
                && !jsonObj.get("filterType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `filterType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("filterType").toString()));
        }
        if ((jsonObj.get("multiplierUp") != null && !jsonObj.get("multiplierUp").isJsonNull())
                && !jsonObj.get("multiplierUp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `multiplierUp` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("multiplierUp").toString()));
        }
        if ((jsonObj.get("multiplierDown") != null && !jsonObj.get("multiplierDown").isJsonNull())
                && !jsonObj.get("multiplierDown").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `multiplierDown` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("multiplierDown").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PercentPriceFilter.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PercentPriceFilter' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PercentPriceFilter> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PercentPriceFilter.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PercentPriceFilter>() {
                        @Override
                        public void write(JsonWriter out, PercentPriceFilter value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PercentPriceFilter read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PercentPriceFilter given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PercentPriceFilter
     * @throws IOException if the JSON string is invalid with respect to PercentPriceFilter
     */
    public static PercentPriceFilter fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PercentPriceFilter.class);
    }

    /**
     * Convert an instance of PercentPriceFilter to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.api;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.common.websocket.adapter.ConnectionInterface;
import com.binance.connector.client.common.websocket.dtos.ApiRequestWrapperDTO;
import com.binance.connector.client.common.websocket.dtos.BaseRequestDTO;
import com.binance.connector.client.common.websocket.dtos.StreamResponse;
import com.binance.connector.client.common.websocket.service.StreamBlockingQueue;
import com.binance.connector.client.common.websocket.service.StreamBlockingQueueWrapper;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.binance.connector.client.spot.websocket.api.model.SessionSubscriptionsResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamEventsResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamPingRequest;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamPingResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamStartResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamStopRequest;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamStopResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamSubscribeResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamSubscribeSignatureResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamUnsubscribeRequest;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamUnsubscribeResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CompletableFuture;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class UserDataStreamApi {
    private ConnectionInterface connection;

    public UserDataStreamApi() {}

    public UserDataStreamApi(ConnectionInterface connection) {
        this.connection = connection;
    }

    /**
     * WebSocket Listing all subscriptions Weight: 2 **Data Source**: Memory
     *
     * @return SessionSubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Listing all subscriptions </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#listing-all-subscriptions">WebSocket
     *     Listing all subscriptions Documentation</a>
     */
    public CompletableFuture<SessionSubscriptionsResponse> sessionSubscriptions()
            throws ApiException {
        sessionSubscriptionsValidateBeforeCall();
        String methodName = "/session.subscriptions".substring(1);
        ApiRequestWrapperDTO<BaseRequestDTO, SessionSubscriptionsResponse> build =
                new ApiRequestWrapperDTO.Builder<BaseRequestDTO, SessionSubscriptionsResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(new BaseRequestDTO())
                        .responseType(SessionSubscriptionsResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void sessionSubscriptionsValidateBeforeCall() throws ApiException {}

    /**
     * WebSocket Ping user data stream Ping a user data stream to keep it alive. User data streams
     * close automatically after 60 minutes, even if you&#39;re listening to them on WebSocket
     * Streams. In order to keep the stream open, you have to regularly send pings using the
     * &#x60;userDataStream.ping&#x60; request. It is recommended to send a ping once every 30
     * minutes. This request does not require &#x60;signature&#x60;. Weight: 2
     *
     * @param userDataStreamPingRequest (required)
     * @return UserDataStreamPingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Ping user data stream </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#ping-user-data-stream-user_stream">WebSocket
     *     Ping user data stream Documentation</a>
     */
    public CompletableFuture<UserDataStreamPingResponse> userDataStreamPing(
            UserDataStreamPingRequest userDataStreamPingRequest) throws ApiException {
        userDataStreamPingValidateBeforeCall(userDataStreamPingRequest);
        String methodName = "/userDataStream.ping".substring(1);
        ApiRequestWrapperDTO<UserDataStreamPingRequest, UserDataStreamPingResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                UserDataStreamPingRequest, UserDataStreamPingResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(userDataStreamPingRequest)
                        .responseType(UserDataStreamPingResponse.class)
                        .signed(false)
                        .apiKeyOnly(true)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void userDataStreamPingValidateBeforeCall(
            UserDataStreamPingRequest userDataStreamPingRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<UserDataStreamPingRequest>> violations =
                    validator.validate(userDataStreamPingRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Start user data stream Start a new user data stream. Note the stream will close in
     * 60 minutes unless &#x60;userDataStream.ping&#x60; requests are sent regularly. This request
     * does not require &#x60;signature&#x60;. Weight: 2
     *
     * @return UserDataStreamStartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Start user data stream </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#start-user-data-stream-user_stream">WebSocket
     *     Start user data stream Documentation</a>
     */
    public CompletableFuture<UserDataStreamStartResponse> userDataStreamStart()
            throws ApiException {
        userDataStreamStartValidateBeforeCall();
        String methodName = "/userDataStream.start".substring(1);
        ApiRequestWrapperDTO<BaseRequestDTO, UserDataStreamStartResponse> build =
                new ApiRequestWrapperDTO.Builder<BaseRequestDTO, UserDataStreamStartResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(new BaseRequestDTO())
                        .responseType(UserDataStreamStartResponse.class)
                        .signed(false)
                        .apiKeyOnly(true)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void userDataStreamStartValidateBeforeCall() throws ApiException {}

    /**
     * WebSocket Stop user data stream Explicitly stop and close the user data stream. This request
     * does not require &#x60;signature&#x60;. Weight: 2
     *
     * @param userDataStreamStopRequest (required)
     * @return UserDataStreamStopResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Stop user data stream </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#stop-user-data-stream-user_stream">WebSocket
     *     Stop user data stream Documentation</a>
     */
    public CompletableFuture<UserDataStreamStopResponse> userDataStreamStop(
            UserDataStreamStopRequest userDataStreamStopRequest) throws ApiException {
        userDataStreamStopValidateBeforeCall(userDataStreamStopRequest);
        String methodName = "/userDataStream.stop".substring(1);
        ApiRequestWrapperDTO<UserDataStreamStopRequest, UserDataStreamStopResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                UserDataStreamStopRequest, UserDataStreamStopResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(userDataStreamStopRequest)
                        .responseType(UserDataStreamStopResponse.class)
                        .signed(false)
                        .apiKeyOnly(true)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void userDataStreamStopValidateBeforeCall(
            UserDataStreamStopRequest userDataStreamStopRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<UserDataStreamStopRequest>> violations =
                    validator.validate(userDataStreamStopRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Subscribe to User Data Stream Subscribe to the User Data Stream in the current
     * WebSocket connection. Weight: 2
     *
     * @return UserDataStreamSubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe to User Data Stream </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#subscribe-to-user-data-stream-user_stream">WebSocket
     *     Subscribe to User Data Stream Documentation</a>
     */
    public StreamResponse<UserDataStreamSubscribeResponse, UserDataStreamEventsResponse>
            userDataStreamSubscribe() throws ApiException {
        userDataStreamSubscribeValidateBeforeCall();
        String methodName = "/userDataStream.subscribe".substring(1);
        ApiRequestWrapperDTO<BaseRequestDTO, UserDataStreamSubscribeResponse> build =
                new ApiRequestWrapperDTO.Builder<BaseRequestDTO, UserDataStreamSubscribeResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(new BaseRequestDTO())
                        .responseType(UserDataStreamSubscribeResponse.class)
                        .signed(false)
                        .build();

        try {
            BlockingQueue<String> queue = connection.sendForStream(build);
            TypeToken<UserDataStreamEventsResponse> typeToken = new TypeToken<>() {};

            return new StreamResponse<>(
                    build.getResponseCallback(),
                    new StreamBlockingQueueWrapper<>(
                            new StreamBlockingQueue<>(queue), typeToken, JSON.getGson()));
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
    }

    @SuppressWarnings("rawtypes")
    private void userDataStreamSubscribeValidateBeforeCall() throws ApiException {}

    /**
     * WebSocket Subscribe to User Data Stream through signature subscription Weight: 2
     *
     * @return UserDataStreamSubscribeSignatureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe to User Data Stream through signature subscription </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#subscribe-to-user-data-stream-through-signature-subscription-user_data">WebSocket
     *     Subscribe to User Data Stream through signature subscription Documentation</a>
     */
    public StreamResponse<UserDataStreamSubscribeSignatureResponse, UserDataStreamEventsResponse>
            userDataStreamSubscribeSignature() throws ApiException {
        userDataStreamSubscribeSignatureValidateBeforeCall();
        String methodName = "/userDataStream.subscribe.signature".substring(1);
        ApiRequestWrapperDTO<BaseRequestDTO, UserDataStreamSubscribeSignatureResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                BaseRequestDTO, UserDataStreamSubscribeSignatureResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(new BaseRequestDTO())
                        .responseType(UserDataStreamSubscribeSignatureResponse.class)
                        .build();

        try {
            BlockingQueue<String> queue = connection.sendForStream(build);
            TypeToken<UserDataStreamEventsResponse> typeToken = new TypeToken<>() {};

            return new StreamResponse<>(
                    build.getResponseCallback(),
                    new StreamBlockingQueueWrapper<>(
                            new StreamBlockingQueue<>(queue), typeToken, JSON.getGson()));
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
    }

    @SuppressWarnings("rawtypes")
    private void userDataStreamSubscribeSignatureValidateBeforeCall() throws ApiException {}

    /**
     * WebSocket Unsubscribe from User Data Stream Stop listening to the User Data Stream in the
     * current WebSocket connection. Note that &#x60;session.logout&#x60; will only close the
     * subscription created with &#x60;userdataStream.subscribe&#x60; but not subscriptions opened
     * with &#x60;userDataStream.subscribe.signature&#x60;. Weight: 2
     *
     * @param userDataStreamUnsubscribeRequest (optional)
     * @return UserDataStreamUnsubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Unsubscribe from User Data Stream </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#unsubscribe-from-user-data-stream">WebSocket
     *     Unsubscribe from User Data Stream Documentation</a>
     */
    public CompletableFuture<UserDataStreamUnsubscribeResponse> userDataStreamUnsubscribe(
            UserDataStreamUnsubscribeRequest userDataStreamUnsubscribeRequest) throws ApiException {
        userDataStreamUnsubscribeValidateBeforeCall(userDataStreamUnsubscribeRequest);
        String methodName = "/userDataStream.unsubscribe".substring(1);
        ApiRequestWrapperDTO<UserDataStreamUnsubscribeRequest, UserDataStreamUnsubscribeResponse>
                build =
                        new ApiRequestWrapperDTO.Builder<
                                        UserDataStreamUnsubscribeRequest,
                                        UserDataStreamUnsubscribeResponse>()
                                .id(getRequestID())
                                .method(methodName)
                                .params(userDataStreamUnsubscribeRequest)
                                .responseType(UserDataStreamUnsubscribeResponse.class)
                                .signed(false)
                                .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void userDataStreamUnsubscribeValidateBeforeCall(
            UserDataStreamUnsubscribeRequest userDataStreamUnsubscribeRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<UserDataStreamUnsubscribeRequest>> violations =
                    validator.validate(userDataStreamUnsubscribeRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    public String getRequestID() {
        return UUID.randomUUID().toString();
    }
}

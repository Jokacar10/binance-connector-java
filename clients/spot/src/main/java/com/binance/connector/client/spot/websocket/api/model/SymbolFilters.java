/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.AbstractOpenApiSchema;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.validator.constraints.*;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SymbolFilters extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SymbolFilters.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SymbolFilters.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SymbolFilters' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PriceFilter> adapterPriceFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(PriceFilter.class));
            final TypeAdapter<PercentPriceFilter> adapterPercentPriceFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(PercentPriceFilter.class));
            final TypeAdapter<PercentPriceBySideFilter> adapterPercentPriceBySideFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(PercentPriceBySideFilter.class));
            final TypeAdapter<LotSizeFilter> adapterLotSizeFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(LotSizeFilter.class));
            final TypeAdapter<MinNotionalFilter> adapterMinNotionalFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MinNotionalFilter.class));
            final TypeAdapter<NotionalFilter> adapterNotionalFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(NotionalFilter.class));
            final TypeAdapter<IcebergPartsFilter> adapterIcebergPartsFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(IcebergPartsFilter.class));
            final TypeAdapter<MarketLotSizeFilter> adapterMarketLotSizeFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MarketLotSizeFilter.class));
            final TypeAdapter<MaxNumOrdersFilter> adapterMaxNumOrdersFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MaxNumOrdersFilter.class));
            final TypeAdapter<MaxNumAlgoOrdersFilter> adapterMaxNumAlgoOrdersFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MaxNumAlgoOrdersFilter.class));
            final TypeAdapter<MaxNumIcebergOrdersFilter> adapterMaxNumIcebergOrdersFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MaxNumIcebergOrdersFilter.class));
            final TypeAdapter<MaxPositionFilter> adapterMaxPositionFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MaxPositionFilter.class));
            final TypeAdapter<TrailingDeltaFilter> adapterTrailingDeltaFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(TrailingDeltaFilter.class));
            final TypeAdapter<TPlusSellFilter> adapterTPlusSellFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(TPlusSellFilter.class));
            final TypeAdapter<MaxNumOrderListsFilter> adapterMaxNumOrderListsFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MaxNumOrderListsFilter.class));
            final TypeAdapter<MaxNumOrderAmendsFilter> adapterMaxNumOrderAmendsFilter =
                    gson.getDelegateAdapter(this, TypeToken.get(MaxNumOrderAmendsFilter.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SymbolFilters>() {
                        @Override
                        public void write(JsonWriter out, SymbolFilters value) throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `PriceFilter`
                            if (value.getActualInstance() instanceof PriceFilter) {
                                JsonElement element =
                                        adapterPriceFilter.toJsonTree(
                                                (PriceFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `PercentPriceFilter`
                            if (value.getActualInstance() instanceof PercentPriceFilter) {
                                JsonElement element =
                                        adapterPercentPriceFilter.toJsonTree(
                                                (PercentPriceFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type
                            // `PercentPriceBySideFilter`
                            if (value.getActualInstance() instanceof PercentPriceBySideFilter) {
                                JsonElement element =
                                        adapterPercentPriceBySideFilter.toJsonTree(
                                                (PercentPriceBySideFilter)
                                                        value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `LotSizeFilter`
                            if (value.getActualInstance() instanceof LotSizeFilter) {
                                JsonElement element =
                                        adapterLotSizeFilter.toJsonTree(
                                                (LotSizeFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MinNotionalFilter`
                            if (value.getActualInstance() instanceof MinNotionalFilter) {
                                JsonElement element =
                                        adapterMinNotionalFilter.toJsonTree(
                                                (MinNotionalFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `NotionalFilter`
                            if (value.getActualInstance() instanceof NotionalFilter) {
                                JsonElement element =
                                        adapterNotionalFilter.toJsonTree(
                                                (NotionalFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `IcebergPartsFilter`
                            if (value.getActualInstance() instanceof IcebergPartsFilter) {
                                JsonElement element =
                                        adapterIcebergPartsFilter.toJsonTree(
                                                (IcebergPartsFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MarketLotSizeFilter`
                            if (value.getActualInstance() instanceof MarketLotSizeFilter) {
                                JsonElement element =
                                        adapterMarketLotSizeFilter.toJsonTree(
                                                (MarketLotSizeFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MaxNumOrdersFilter`
                            if (value.getActualInstance() instanceof MaxNumOrdersFilter) {
                                JsonElement element =
                                        adapterMaxNumOrdersFilter.toJsonTree(
                                                (MaxNumOrdersFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MaxNumAlgoOrdersFilter`
                            if (value.getActualInstance() instanceof MaxNumAlgoOrdersFilter) {
                                JsonElement element =
                                        adapterMaxNumAlgoOrdersFilter.toJsonTree(
                                                (MaxNumAlgoOrdersFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type
                            // `MaxNumIcebergOrdersFilter`
                            if (value.getActualInstance() instanceof MaxNumIcebergOrdersFilter) {
                                JsonElement element =
                                        adapterMaxNumIcebergOrdersFilter.toJsonTree(
                                                (MaxNumIcebergOrdersFilter)
                                                        value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MaxPositionFilter`
                            if (value.getActualInstance() instanceof MaxPositionFilter) {
                                JsonElement element =
                                        adapterMaxPositionFilter.toJsonTree(
                                                (MaxPositionFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `TrailingDeltaFilter`
                            if (value.getActualInstance() instanceof TrailingDeltaFilter) {
                                JsonElement element =
                                        adapterTrailingDeltaFilter.toJsonTree(
                                                (TrailingDeltaFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `TPlusSellFilter`
                            if (value.getActualInstance() instanceof TPlusSellFilter) {
                                JsonElement element =
                                        adapterTPlusSellFilter.toJsonTree(
                                                (TPlusSellFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MaxNumOrderListsFilter`
                            if (value.getActualInstance() instanceof MaxNumOrderListsFilter) {
                                JsonElement element =
                                        adapterMaxNumOrderListsFilter.toJsonTree(
                                                (MaxNumOrderListsFilter) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MaxNumOrderAmendsFilter`
                            if (value.getActualInstance() instanceof MaxNumOrderAmendsFilter) {
                                JsonElement element =
                                        adapterMaxNumOrderAmendsFilter.toJsonTree(
                                                (MaxNumOrderAmendsFilter)
                                                        value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                        + " IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter,"
                                        + " MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter,"
                                        + " MaxNumOrderAmendsFilter, MaxNumOrderListsFilter,"
                                        + " MaxNumOrdersFilter, MaxPositionFilter,"
                                        + " MinNotionalFilter, NotionalFilter,"
                                        + " PercentPriceBySideFilter, PercentPriceFilter,"
                                        + " PriceFilter, TPlusSellFilter, TrailingDeltaFilter");
                        }

                        @Override
                        public SymbolFilters read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            JsonObject jsonObject = jsonElement.getAsJsonObject();

                            // use discriminator value for faster oneOf lookup
                            SymbolFilters newSymbolFilters = new SymbolFilters();
                            if (jsonObject.get("filterType") == null) {
                                log.log(
                                        Level.WARNING,
                                        "Failed to lookup discriminator value for SymbolFilters as"
                                            + " `filterType` was not found in the payload or the"
                                            + " payload is empty.");
                            } else {
                                // look up the discriminator value in the field `filterType`
                                switch (jsonObject.get("filterType").getAsString()) {
                                    case "ICEBERG_PARTS":
                                        deserialized =
                                                adapterIcebergPartsFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "LOT_SIZE":
                                        deserialized =
                                                adapterLotSizeFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MARKET_LOT_SIZE":
                                        deserialized =
                                                adapterMarketLotSizeFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MAX_NUM_ALGO_ORDERS":
                                        deserialized =
                                                adapterMaxNumAlgoOrdersFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MAX_NUM_ICEBERG_ORDERS":
                                        deserialized =
                                                adapterMaxNumIcebergOrdersFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MAX_NUM_ORDERS":
                                        deserialized =
                                                adapterMaxNumOrdersFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MAX_NUM_ORDER_AMENDS":
                                        deserialized =
                                                adapterMaxNumOrderAmendsFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MAX_NUM_ORDER_LISTS":
                                        deserialized =
                                                adapterMaxNumOrderListsFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MAX_POSITION":
                                        deserialized =
                                                adapterMaxPositionFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MIN_NOTIONAL":
                                        deserialized =
                                                adapterMinNotionalFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "NOTIONAL":
                                        deserialized =
                                                adapterNotionalFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "PERCENT_PRICE":
                                        deserialized =
                                                adapterPercentPriceFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "PERCENT_PRICE_BY_SIDE":
                                        deserialized =
                                                adapterPercentPriceBySideFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "PRICE_FILTER":
                                        deserialized = adapterPriceFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "TRAILING_DELTA":
                                        deserialized =
                                                adapterTrailingDeltaFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "T_PLUS_SELL":
                                        deserialized =
                                                adapterTPlusSellFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "IcebergPartsFilter":
                                        deserialized =
                                                adapterIcebergPartsFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "LotSizeFilter":
                                        deserialized =
                                                adapterLotSizeFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MarketLotSizeFilter":
                                        deserialized =
                                                adapterMarketLotSizeFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MaxNumAlgoOrdersFilter":
                                        deserialized =
                                                adapterMaxNumAlgoOrdersFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MaxNumIcebergOrdersFilter":
                                        deserialized =
                                                adapterMaxNumIcebergOrdersFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MaxNumOrderAmendsFilter":
                                        deserialized =
                                                adapterMaxNumOrderAmendsFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MaxNumOrderListsFilter":
                                        deserialized =
                                                adapterMaxNumOrderListsFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MaxNumOrdersFilter":
                                        deserialized =
                                                adapterMaxNumOrdersFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MaxPositionFilter":
                                        deserialized =
                                                adapterMaxPositionFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "MinNotionalFilter":
                                        deserialized =
                                                adapterMinNotionalFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "NotionalFilter":
                                        deserialized =
                                                adapterNotionalFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "PercentPriceBySideFilter":
                                        deserialized =
                                                adapterPercentPriceBySideFilter.fromJsonTree(
                                                        jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "PercentPriceFilter":
                                        deserialized =
                                                adapterPercentPriceFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "PriceFilter":
                                        deserialized = adapterPriceFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "TPlusSellFilter":
                                        deserialized =
                                                adapterTPlusSellFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    case "TrailingDeltaFilter":
                                        deserialized =
                                                adapterTrailingDeltaFilter.fromJsonTree(jsonObject);
                                        newSymbolFilters.setActualInstance(deserialized);
                                        return newSymbolFilters;
                                    default:
                                        newSymbolFilters.setActualInstance(jsonElement.toString());
                                        log.log(
                                                Level.WARNING,
                                                String.format(
                                                        "Failed to lookup discriminator value `%s`"
                                                            + " for SymbolFilters. Possible values:"
                                                            + " ICEBERG_PARTS LOT_SIZE"
                                                            + " MARKET_LOT_SIZE MAX_NUM_ALGO_ORDERS"
                                                            + " MAX_NUM_ICEBERG_ORDERS"
                                                            + " MAX_NUM_ORDERS MAX_NUM_ORDER_AMENDS"
                                                            + " MAX_NUM_ORDER_LISTS MAX_POSITION"
                                                            + " MIN_NOTIONAL NOTIONAL PERCENT_PRICE"
                                                            + " PERCENT_PRICE_BY_SIDE PRICE_FILTER"
                                                            + " TRAILING_DELTA T_PLUS_SELL"
                                                            + " IcebergPartsFilter LotSizeFilter"
                                                            + " MarketLotSizeFilter"
                                                            + " MaxNumAlgoOrdersFilter"
                                                            + " MaxNumIcebergOrdersFilter"
                                                            + " MaxNumOrderAmendsFilter"
                                                            + " MaxNumOrderListsFilter"
                                                            + " MaxNumOrdersFilter"
                                                            + " MaxPositionFilter MinNotionalFilter"
                                                            + " NotionalFilter"
                                                            + " PercentPriceBySideFilter"
                                                            + " PercentPriceFilter PriceFilter"
                                                            + " TPlusSellFilter"
                                                            + " TrailingDeltaFilter. Falling back"
                                                            + " to String.",
                                                        jsonObject
                                                                .get("filterType")
                                                                .getAsString()));
                                }
                            }

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize PriceFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                PriceFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterPriceFilter;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'PriceFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for PriceFilter failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'PriceFilter'",
                                        e);
                            }
                            // deserialize PercentPriceFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                PercentPriceFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterPercentPriceFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'PercentPriceFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for PercentPriceFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'PercentPriceFilter'",
                                        e);
                            }
                            // deserialize PercentPriceBySideFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                PercentPriceBySideFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterPercentPriceBySideFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'PercentPriceBySideFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for PercentPriceBySideFilter"
                                                        + " failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema"
                                                + " 'PercentPriceBySideFilter'",
                                        e);
                            }
                            // deserialize LotSizeFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                LotSizeFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterLotSizeFilter;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'LotSizeFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for LotSizeFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'LotSizeFilter'",
                                        e);
                            }
                            // deserialize MinNotionalFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MinNotionalFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMinNotionalFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MinNotionalFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MinNotionalFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'MinNotionalFilter'",
                                        e);
                            }
                            // deserialize NotionalFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                NotionalFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterNotionalFilter;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'NotionalFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for NotionalFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'NotionalFilter'",
                                        e);
                            }
                            // deserialize IcebergPartsFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                IcebergPartsFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterIcebergPartsFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'IcebergPartsFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for IcebergPartsFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'IcebergPartsFilter'",
                                        e);
                            }
                            // deserialize MarketLotSizeFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MarketLotSizeFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMarketLotSizeFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MarketLotSizeFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MarketLotSizeFilter failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'MarketLotSizeFilter'",
                                        e);
                            }
                            // deserialize MaxNumOrdersFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MaxNumOrdersFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMaxNumOrdersFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MaxNumOrdersFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MaxNumOrdersFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'MaxNumOrdersFilter'",
                                        e);
                            }
                            // deserialize MaxNumAlgoOrdersFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MaxNumAlgoOrdersFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMaxNumAlgoOrdersFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MaxNumAlgoOrdersFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MaxNumAlgoOrdersFilter failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'MaxNumAlgoOrdersFilter'",
                                        e);
                            }
                            // deserialize MaxNumIcebergOrdersFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MaxNumIcebergOrdersFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMaxNumIcebergOrdersFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MaxNumIcebergOrdersFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MaxNumIcebergOrdersFilter"
                                                        + " failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema"
                                                + " 'MaxNumIcebergOrdersFilter'",
                                        e);
                            }
                            // deserialize MaxPositionFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MaxPositionFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMaxPositionFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MaxPositionFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MaxPositionFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'MaxPositionFilter'",
                                        e);
                            }
                            // deserialize TrailingDeltaFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                TrailingDeltaFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterTrailingDeltaFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'TrailingDeltaFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for TrailingDeltaFilter failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'TrailingDeltaFilter'",
                                        e);
                            }
                            // deserialize TPlusSellFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                TPlusSellFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterTPlusSellFilter;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'TPlusSellFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for TPlusSellFilter failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'TPlusSellFilter'",
                                        e);
                            }
                            // deserialize MaxNumOrderListsFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MaxNumOrderListsFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMaxNumOrderListsFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MaxNumOrderListsFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MaxNumOrderListsFilter failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'MaxNumOrderListsFilter'",
                                        e);
                            }
                            // deserialize MaxNumOrderAmendsFilter
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MaxNumOrderAmendsFilter.validateJsonElement(jsonElement);
                                actualAdapter = adapterMaxNumOrderAmendsFilter;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'MaxNumOrderAmendsFilter'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MaxNumOrderAmendsFilter failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema"
                                                + " 'MaxNumOrderAmendsFilter'",
                                        e);
                            }

                            if (match == 1) {
                                SymbolFilters ret = new SymbolFilters();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for SymbolFilters: %d classes"
                                                    + " match result, expected 1. Detailed failure"
                                                    + " message for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SymbolFilters() {
        super("oneOf", Boolean.FALSE);
    }

    public SymbolFilters(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PriceFilter", PriceFilter.class);
        schemas.put("PercentPriceFilter", PercentPriceFilter.class);
        schemas.put("PercentPriceBySideFilter", PercentPriceBySideFilter.class);
        schemas.put("LotSizeFilter", LotSizeFilter.class);
        schemas.put("MinNotionalFilter", MinNotionalFilter.class);
        schemas.put("NotionalFilter", NotionalFilter.class);
        schemas.put("IcebergPartsFilter", IcebergPartsFilter.class);
        schemas.put("MarketLotSizeFilter", MarketLotSizeFilter.class);
        schemas.put("MaxNumOrdersFilter", MaxNumOrdersFilter.class);
        schemas.put("MaxNumAlgoOrdersFilter", MaxNumAlgoOrdersFilter.class);
        schemas.put("MaxNumIcebergOrdersFilter", MaxNumIcebergOrdersFilter.class);
        schemas.put("MaxPositionFilter", MaxPositionFilter.class);
        schemas.put("TrailingDeltaFilter", TrailingDeltaFilter.class);
        schemas.put("TPlusSellFilter", TPlusSellFilter.class);
        schemas.put("MaxNumOrderListsFilter", MaxNumOrderListsFilter.class);
        schemas.put("MaxNumOrderAmendsFilter", MaxNumOrderAmendsFilter.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SymbolFilters.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter,
     * MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter, MaxNumOrderAmendsFilter,
     * MaxNumOrderListsFilter, MaxNumOrdersFilter, MaxPositionFilter, MinNotionalFilter,
     * NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter, PriceFilter, TPlusSellFilter,
     * TrailingDeltaFilter
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PriceFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PercentPriceFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PercentPriceBySideFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LotSizeFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MinNotionalFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotionalFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IcebergPartsFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MarketLotSizeFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MaxNumOrdersFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MaxNumAlgoOrdersFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MaxNumIcebergOrdersFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MaxPositionFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TrailingDeltaFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TPlusSellFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MaxNumOrderListsFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MaxNumOrderAmendsFilter) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be IcebergPartsFilter, LotSizeFilter,"
                    + " MarketLotSizeFilter, MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter,"
                    + " MaxNumOrderAmendsFilter, MaxNumOrderListsFilter, MaxNumOrdersFilter,"
                    + " MaxPositionFilter, MinNotionalFilter, NotionalFilter,"
                    + " PercentPriceBySideFilter, PercentPriceFilter, PriceFilter, TPlusSellFilter,"
                    + " TrailingDeltaFilter");
    }

    /**
     * Get the actual instance, which can be the following: IcebergPartsFilter, LotSizeFilter,
     * MarketLotSizeFilter, MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter,
     * MaxNumOrderAmendsFilter, MaxNumOrderListsFilter, MaxNumOrdersFilter, MaxPositionFilter,
     * MinNotionalFilter, NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter, PriceFilter,
     * TPlusSellFilter, TrailingDeltaFilter
     *
     * @return The actual instance (IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter,
     *     MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter, MaxNumOrderAmendsFilter,
     *     MaxNumOrderListsFilter, MaxNumOrdersFilter, MaxPositionFilter, MinNotionalFilter,
     *     NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter, PriceFilter,
     *     TPlusSellFilter, TrailingDeltaFilter)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PriceFilter`. If the actual instance is not `PriceFilter`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `PriceFilter`
     * @throws ClassCastException if the instance is not `PriceFilter`
     */
    public PriceFilter getPriceFilter() throws ClassCastException {
        return (PriceFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `PercentPriceFilter`. If the actual instance is not
     * `PercentPriceFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `PercentPriceFilter`
     * @throws ClassCastException if the instance is not `PercentPriceFilter`
     */
    public PercentPriceFilter getPercentPriceFilter() throws ClassCastException {
        return (PercentPriceFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `PercentPriceBySideFilter`. If the actual instance is not
     * `PercentPriceBySideFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `PercentPriceBySideFilter`
     * @throws ClassCastException if the instance is not `PercentPriceBySideFilter`
     */
    public PercentPriceBySideFilter getPercentPriceBySideFilter() throws ClassCastException {
        return (PercentPriceBySideFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `LotSizeFilter`. If the actual instance is not `LotSizeFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LotSizeFilter`
     * @throws ClassCastException if the instance is not `LotSizeFilter`
     */
    public LotSizeFilter getLotSizeFilter() throws ClassCastException {
        return (LotSizeFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MinNotionalFilter`. If the actual instance is not
     * `MinNotionalFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MinNotionalFilter`
     * @throws ClassCastException if the instance is not `MinNotionalFilter`
     */
    public MinNotionalFilter getMinNotionalFilter() throws ClassCastException {
        return (MinNotionalFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `NotionalFilter`. If the actual instance is not `NotionalFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotionalFilter`
     * @throws ClassCastException if the instance is not `NotionalFilter`
     */
    public NotionalFilter getNotionalFilter() throws ClassCastException {
        return (NotionalFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `IcebergPartsFilter`. If the actual instance is not
     * `IcebergPartsFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `IcebergPartsFilter`
     * @throws ClassCastException if the instance is not `IcebergPartsFilter`
     */
    public IcebergPartsFilter getIcebergPartsFilter() throws ClassCastException {
        return (IcebergPartsFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MarketLotSizeFilter`. If the actual instance is not
     * `MarketLotSizeFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MarketLotSizeFilter`
     * @throws ClassCastException if the instance is not `MarketLotSizeFilter`
     */
    public MarketLotSizeFilter getMarketLotSizeFilter() throws ClassCastException {
        return (MarketLotSizeFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MaxNumOrdersFilter`. If the actual instance is not
     * `MaxNumOrdersFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MaxNumOrdersFilter`
     * @throws ClassCastException if the instance is not `MaxNumOrdersFilter`
     */
    public MaxNumOrdersFilter getMaxNumOrdersFilter() throws ClassCastException {
        return (MaxNumOrdersFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MaxNumAlgoOrdersFilter`. If the actual instance is not
     * `MaxNumAlgoOrdersFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MaxNumAlgoOrdersFilter`
     * @throws ClassCastException if the instance is not `MaxNumAlgoOrdersFilter`
     */
    public MaxNumAlgoOrdersFilter getMaxNumAlgoOrdersFilter() throws ClassCastException {
        return (MaxNumAlgoOrdersFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MaxNumIcebergOrdersFilter`. If the actual instance is not
     * `MaxNumIcebergOrdersFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MaxNumIcebergOrdersFilter`
     * @throws ClassCastException if the instance is not `MaxNumIcebergOrdersFilter`
     */
    public MaxNumIcebergOrdersFilter getMaxNumIcebergOrdersFilter() throws ClassCastException {
        return (MaxNumIcebergOrdersFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MaxPositionFilter`. If the actual instance is not
     * `MaxPositionFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MaxPositionFilter`
     * @throws ClassCastException if the instance is not `MaxPositionFilter`
     */
    public MaxPositionFilter getMaxPositionFilter() throws ClassCastException {
        return (MaxPositionFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `TrailingDeltaFilter`. If the actual instance is not
     * `TrailingDeltaFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `TrailingDeltaFilter`
     * @throws ClassCastException if the instance is not `TrailingDeltaFilter`
     */
    public TrailingDeltaFilter getTrailingDeltaFilter() throws ClassCastException {
        return (TrailingDeltaFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `TPlusSellFilter`. If the actual instance is not
     * `TPlusSellFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `TPlusSellFilter`
     * @throws ClassCastException if the instance is not `TPlusSellFilter`
     */
    public TPlusSellFilter getTPlusSellFilter() throws ClassCastException {
        return (TPlusSellFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MaxNumOrderListsFilter`. If the actual instance is not
     * `MaxNumOrderListsFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MaxNumOrderListsFilter`
     * @throws ClassCastException if the instance is not `MaxNumOrderListsFilter`
     */
    public MaxNumOrderListsFilter getMaxNumOrderListsFilter() throws ClassCastException {
        return (MaxNumOrderListsFilter) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MaxNumOrderAmendsFilter`. If the actual instance is not
     * `MaxNumOrderAmendsFilter`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `MaxNumOrderAmendsFilter`
     * @throws ClassCastException if the instance is not `MaxNumOrderAmendsFilter`
     */
    public MaxNumOrderAmendsFilter getMaxNumOrderAmendsFilter() throws ClassCastException {
        return (MaxNumOrderAmendsFilter) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SymbolFilters
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PriceFilter
        try {
            PriceFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for PriceFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PercentPriceFilter
        try {
            PercentPriceFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for PercentPriceFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PercentPriceBySideFilter
        try {
            PercentPriceBySideFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for PercentPriceBySideFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LotSizeFilter
        try {
            LotSizeFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for LotSizeFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MinNotionalFilter
        try {
            MinNotionalFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MinNotionalFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotionalFilter
        try {
            NotionalFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for NotionalFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IcebergPartsFilter
        try {
            IcebergPartsFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for IcebergPartsFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MarketLotSizeFilter
        try {
            MarketLotSizeFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MarketLotSizeFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MaxNumOrdersFilter
        try {
            MaxNumOrdersFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MaxNumOrdersFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MaxNumAlgoOrdersFilter
        try {
            MaxNumAlgoOrdersFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MaxNumAlgoOrdersFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MaxNumIcebergOrdersFilter
        try {
            MaxNumIcebergOrdersFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MaxNumIcebergOrdersFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MaxPositionFilter
        try {
            MaxPositionFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MaxPositionFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TrailingDeltaFilter
        try {
            TrailingDeltaFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for TrailingDeltaFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TPlusSellFilter
        try {
            TPlusSellFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for TPlusSellFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MaxNumOrderListsFilter
        try {
            MaxNumOrderListsFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MaxNumOrderListsFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MaxNumOrderAmendsFilter
        try {
            MaxNumOrderAmendsFilter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MaxNumOrderAmendsFilter failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for SymbolFilters with oneOf schemas:"
                                + " IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter,"
                                + " MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter,"
                                + " MaxNumOrderAmendsFilter, MaxNumOrderListsFilter,"
                                + " MaxNumOrdersFilter, MaxPositionFilter, MinNotionalFilter,"
                                + " NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter,"
                                + " PriceFilter, TPlusSellFilter, TrailingDeltaFilter. %d class(es)"
                                + " match the result, expected 1. Detailed failure message for"
                                + " oneOf schemas: %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of SymbolFilters given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SymbolFilters
     * @throws IOException if the JSON string is invalid with respect to SymbolFilters
     */
    public static SymbolFilters fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SymbolFilters.class);
    }

    /**
     * Convert an instance of SymbolFilters to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

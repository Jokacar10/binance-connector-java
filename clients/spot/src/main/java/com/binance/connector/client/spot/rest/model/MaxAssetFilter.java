/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** MaxAssetFilter */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MaxAssetFilter {
    public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";

    @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
    @jakarta.annotation.Nullable
    private String filterType;

    public static final String SERIALIZED_NAME_QTY_EXPONENT = "qtyExponent";

    @SerializedName(SERIALIZED_NAME_QTY_EXPONENT)
    @jakarta.annotation.Nullable
    private Integer qtyExponent;

    public static final String SERIALIZED_NAME_LIMIT = "limit";

    @SerializedName(SERIALIZED_NAME_LIMIT)
    @jakarta.annotation.Nullable
    private String limit;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public MaxAssetFilter() {}

    public MaxAssetFilter filterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
        return this;
    }

    /**
     * Get filterType
     *
     * @return filterType
     */
    @jakarta.annotation.Nullable
    public String getFilterType() {
        return filterType;
    }

    public void setFilterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
    }

    public MaxAssetFilter qtyExponent(@jakarta.annotation.Nullable Integer qtyExponent) {
        this.qtyExponent = qtyExponent;
        return this;
    }

    /**
     * Get qtyExponent
     *
     * @return qtyExponent
     */
    @jakarta.annotation.Nullable
    public Integer getQtyExponent() {
        return qtyExponent;
    }

    public void setQtyExponent(@jakarta.annotation.Nullable Integer qtyExponent) {
        this.qtyExponent = qtyExponent;
    }

    public MaxAssetFilter limit(@jakarta.annotation.Nullable String limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @jakarta.annotation.Nullable
    public String getLimit() {
        return limit;
    }

    public void setLimit(@jakarta.annotation.Nullable String limit) {
        this.limit = limit;
    }

    public MaxAssetFilter asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MaxAssetFilter maxAssetFilter = (MaxAssetFilter) o;
        return Objects.equals(this.filterType, maxAssetFilter.filterType)
                && Objects.equals(this.qtyExponent, maxAssetFilter.qtyExponent)
                && Objects.equals(this.limit, maxAssetFilter.limit)
                && Objects.equals(this.asset, maxAssetFilter.asset);
    }

    @Override
    public int hashCode() {
        return Objects.hash(filterType, qtyExponent, limit, asset);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MaxAssetFilter {\n");
        sb.append("		filterType: ").append(toIndentedString(filterType)).append("\n");
        sb.append("		qtyExponent: ").append(toIndentedString(qtyExponent)).append("\n");
        sb.append("		limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object filterTypeValue = getFilterType();
        String filterTypeValueAsString = "";
        filterTypeValueAsString = filterTypeValue.toString();
        sb.append("filterType=").append(urlEncode(filterTypeValueAsString)).append("");
        Object qtyExponentValue = getQtyExponent();
        String qtyExponentValueAsString = "";
        qtyExponentValueAsString = qtyExponentValue.toString();
        sb.append("qtyExponent=").append(urlEncode(qtyExponentValueAsString)).append("");
        Object limitValue = getLimit();
        String limitValueAsString = "";
        limitValueAsString = limitValue.toString();
        sb.append("limit=").append(urlEncode(limitValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("filterType");
        openapiFields.add("qtyExponent");
        openapiFields.add("limit");
        openapiFields.add("asset");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MaxAssetFilter
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MaxAssetFilter.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MaxAssetFilter is not found in the"
                                        + " empty JSON string",
                                MaxAssetFilter.openapiRequiredFields.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull())
                && !jsonObj.get("filterType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `filterType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("filterType").toString()));
        }
        if ((jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull())
                && !jsonObj.get("limit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `limit` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("limit").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MaxAssetFilter.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MaxAssetFilter' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MaxAssetFilter> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(MaxAssetFilter.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MaxAssetFilter>() {
                        @Override
                        public void write(JsonWriter out, MaxAssetFilter value) throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MaxAssetFilter read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MaxAssetFilter given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MaxAssetFilter
     * @throws IOException if the JSON string is invalid with respect to MaxAssetFilter
     */
    public static MaxAssetFilter fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MaxAssetFilter.class);
    }

    /**
     * Convert an instance of MaxAssetFilter to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

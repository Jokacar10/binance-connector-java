/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.model;

import com.binance.connector.client.staking.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** GetSoftStakingProductListResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetSoftStakingProductListResponseRowsInner {
    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_MIN_AMOUNT = "minAmount";

    @SerializedName(SERIALIZED_NAME_MIN_AMOUNT)
    @jakarta.annotation.Nullable
    private String minAmount;

    public static final String SERIALIZED_NAME_MAX_CAP = "maxCap";

    @SerializedName(SERIALIZED_NAME_MAX_CAP)
    @jakarta.annotation.Nullable
    private String maxCap;

    public static final String SERIALIZED_NAME_APR = "apr";

    @SerializedName(SERIALIZED_NAME_APR)
    @jakarta.annotation.Nullable
    private String apr;

    public static final String SERIALIZED_NAME_STAKED_AMOUNT = "stakedAmount";

    @SerializedName(SERIALIZED_NAME_STAKED_AMOUNT)
    @jakarta.annotation.Nullable
    private String stakedAmount;

    public static final String SERIALIZED_NAME_TOTAL_PROFIT = "totalProfit";

    @SerializedName(SERIALIZED_NAME_TOTAL_PROFIT)
    @jakarta.annotation.Nullable
    private String totalProfit;

    public GetSoftStakingProductListResponseRowsInner() {}

    public GetSoftStakingProductListResponseRowsInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetSoftStakingProductListResponseRowsInner minAmount(
            @jakarta.annotation.Nullable String minAmount) {
        this.minAmount = minAmount;
        return this;
    }

    /**
     * Get minAmount
     *
     * @return minAmount
     */
    @jakarta.annotation.Nullable
    public String getMinAmount() {
        return minAmount;
    }

    public void setMinAmount(@jakarta.annotation.Nullable String minAmount) {
        this.minAmount = minAmount;
    }

    public GetSoftStakingProductListResponseRowsInner maxCap(
            @jakarta.annotation.Nullable String maxCap) {
        this.maxCap = maxCap;
        return this;
    }

    /**
     * Get maxCap
     *
     * @return maxCap
     */
    @jakarta.annotation.Nullable
    public String getMaxCap() {
        return maxCap;
    }

    public void setMaxCap(@jakarta.annotation.Nullable String maxCap) {
        this.maxCap = maxCap;
    }

    public GetSoftStakingProductListResponseRowsInner apr(@jakarta.annotation.Nullable String apr) {
        this.apr = apr;
        return this;
    }

    /**
     * Get apr
     *
     * @return apr
     */
    @jakarta.annotation.Nullable
    public String getApr() {
        return apr;
    }

    public void setApr(@jakarta.annotation.Nullable String apr) {
        this.apr = apr;
    }

    public GetSoftStakingProductListResponseRowsInner stakedAmount(
            @jakarta.annotation.Nullable String stakedAmount) {
        this.stakedAmount = stakedAmount;
        return this;
    }

    /**
     * Get stakedAmount
     *
     * @return stakedAmount
     */
    @jakarta.annotation.Nullable
    public String getStakedAmount() {
        return stakedAmount;
    }

    public void setStakedAmount(@jakarta.annotation.Nullable String stakedAmount) {
        this.stakedAmount = stakedAmount;
    }

    public GetSoftStakingProductListResponseRowsInner totalProfit(
            @jakarta.annotation.Nullable String totalProfit) {
        this.totalProfit = totalProfit;
        return this;
    }

    /**
     * Get totalProfit
     *
     * @return totalProfit
     */
    @jakarta.annotation.Nullable
    public String getTotalProfit() {
        return totalProfit;
    }

    public void setTotalProfit(@jakarta.annotation.Nullable String totalProfit) {
        this.totalProfit = totalProfit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSoftStakingProductListResponseRowsInner getSoftStakingProductListResponseRowsInner =
                (GetSoftStakingProductListResponseRowsInner) o;
        return Objects.equals(this.asset, getSoftStakingProductListResponseRowsInner.asset)
                && Objects.equals(
                        this.minAmount, getSoftStakingProductListResponseRowsInner.minAmount)
                && Objects.equals(this.maxCap, getSoftStakingProductListResponseRowsInner.maxCap)
                && Objects.equals(this.apr, getSoftStakingProductListResponseRowsInner.apr)
                && Objects.equals(
                        this.stakedAmount, getSoftStakingProductListResponseRowsInner.stakedAmount)
                && Objects.equals(
                        this.totalProfit, getSoftStakingProductListResponseRowsInner.totalProfit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(asset, minAmount, maxCap, apr, stakedAmount, totalProfit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetSoftStakingProductListResponseRowsInner {\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		minAmount: ").append(toIndentedString(minAmount)).append("\n");
        sb.append("		maxCap: ").append(toIndentedString(maxCap)).append("\n");
        sb.append("		apr: ").append(toIndentedString(apr)).append("\n");
        sb.append("		stakedAmount: ").append(toIndentedString(stakedAmount)).append("\n");
        sb.append("		totalProfit: ").append(toIndentedString(totalProfit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object minAmountValue = getMinAmount();
        String minAmountValueAsString = "";
        minAmountValueAsString = minAmountValue.toString();
        sb.append("minAmount=").append(urlEncode(minAmountValueAsString)).append("");
        Object maxCapValue = getMaxCap();
        String maxCapValueAsString = "";
        maxCapValueAsString = maxCapValue.toString();
        sb.append("maxCap=").append(urlEncode(maxCapValueAsString)).append("");
        Object aprValue = getApr();
        String aprValueAsString = "";
        aprValueAsString = aprValue.toString();
        sb.append("apr=").append(urlEncode(aprValueAsString)).append("");
        Object stakedAmountValue = getStakedAmount();
        String stakedAmountValueAsString = "";
        stakedAmountValueAsString = stakedAmountValue.toString();
        sb.append("stakedAmount=").append(urlEncode(stakedAmountValueAsString)).append("");
        Object totalProfitValue = getTotalProfit();
        String totalProfitValueAsString = "";
        totalProfitValueAsString = totalProfitValue.toString();
        sb.append("totalProfit=").append(urlEncode(totalProfitValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("asset");
        openapiFields.add("minAmount");
        openapiFields.add("maxCap");
        openapiFields.add("apr");
        openapiFields.add("stakedAmount");
        openapiFields.add("totalProfit");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetSoftStakingProductListResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetSoftStakingProductListResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetSoftStakingProductListResponseRowsInner is not found in"
                                    + " the empty JSON string",
                                GetSoftStakingProductListResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("minAmount") != null && !jsonObj.get("minAmount").isJsonNull())
                && !jsonObj.get("minAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("minAmount").toString()));
        }
        if ((jsonObj.get("maxCap") != null && !jsonObj.get("maxCap").isJsonNull())
                && !jsonObj.get("maxCap").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxCap` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("maxCap").toString()));
        }
        if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull())
                && !jsonObj.get("apr").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `apr` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("apr").toString()));
        }
        if ((jsonObj.get("stakedAmount") != null && !jsonObj.get("stakedAmount").isJsonNull())
                && !jsonObj.get("stakedAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stakedAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("stakedAmount").toString()));
        }
        if ((jsonObj.get("totalProfit") != null && !jsonObj.get("totalProfit").isJsonNull())
                && !jsonObj.get("totalProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalProfit` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalProfit").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetSoftStakingProductListResponseRowsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetSoftStakingProductListResponseRowsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetSoftStakingProductListResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetSoftStakingProductListResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetSoftStakingProductListResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetSoftStakingProductListResponseRowsInner value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetSoftStakingProductListResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetSoftStakingProductListResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetSoftStakingProductListResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetSoftStakingProductListResponseRowsInner
     */
    public static GetSoftStakingProductListResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetSoftStakingProductListResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetSoftStakingProductListResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

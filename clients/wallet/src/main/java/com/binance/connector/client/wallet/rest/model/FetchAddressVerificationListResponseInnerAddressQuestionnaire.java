/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** FetchAddressVerificationListResponseInnerAddressQuestionnaire */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FetchAddressVerificationListResponseInnerAddressQuestionnaire {
    public static final String SERIALIZED_NAME_SEND_TO = "sendTo";

    @SerializedName(SERIALIZED_NAME_SEND_TO)
    @jakarta.annotation.Nullable
    private Long sendTo;

    public static final String SERIALIZED_NAME_SATOSHI_TOKEN = "satoshiToken";

    @SerializedName(SERIALIZED_NAME_SATOSHI_TOKEN)
    @jakarta.annotation.Nullable
    private String satoshiToken;

    public static final String SERIALIZED_NAME_IS_ADDRESS_OWNER = "isAddressOwner";

    @SerializedName(SERIALIZED_NAME_IS_ADDRESS_OWNER)
    @jakarta.annotation.Nullable
    private Long isAddressOwner;

    public static final String SERIALIZED_NAME_VERIFY_METHOD = "verifyMethod";

    @SerializedName(SERIALIZED_NAME_VERIFY_METHOD)
    @jakarta.annotation.Nullable
    private Long verifyMethod;

    public FetchAddressVerificationListResponseInnerAddressQuestionnaire() {}

    public FetchAddressVerificationListResponseInnerAddressQuestionnaire sendTo(
            @jakarta.annotation.Nullable Long sendTo) {
        this.sendTo = sendTo;
        return this;
    }

    /**
     * Get sendTo
     *
     * @return sendTo
     */
    @jakarta.annotation.Nullable
    public Long getSendTo() {
        return sendTo;
    }

    public void setSendTo(@jakarta.annotation.Nullable Long sendTo) {
        this.sendTo = sendTo;
    }

    public FetchAddressVerificationListResponseInnerAddressQuestionnaire satoshiToken(
            @jakarta.annotation.Nullable String satoshiToken) {
        this.satoshiToken = satoshiToken;
        return this;
    }

    /**
     * Get satoshiToken
     *
     * @return satoshiToken
     */
    @jakarta.annotation.Nullable
    public String getSatoshiToken() {
        return satoshiToken;
    }

    public void setSatoshiToken(@jakarta.annotation.Nullable String satoshiToken) {
        this.satoshiToken = satoshiToken;
    }

    public FetchAddressVerificationListResponseInnerAddressQuestionnaire isAddressOwner(
            @jakarta.annotation.Nullable Long isAddressOwner) {
        this.isAddressOwner = isAddressOwner;
        return this;
    }

    /**
     * Get isAddressOwner
     *
     * @return isAddressOwner
     */
    @jakarta.annotation.Nullable
    public Long getIsAddressOwner() {
        return isAddressOwner;
    }

    public void setIsAddressOwner(@jakarta.annotation.Nullable Long isAddressOwner) {
        this.isAddressOwner = isAddressOwner;
    }

    public FetchAddressVerificationListResponseInnerAddressQuestionnaire verifyMethod(
            @jakarta.annotation.Nullable Long verifyMethod) {
        this.verifyMethod = verifyMethod;
        return this;
    }

    /**
     * Get verifyMethod
     *
     * @return verifyMethod
     */
    @jakarta.annotation.Nullable
    public Long getVerifyMethod() {
        return verifyMethod;
    }

    public void setVerifyMethod(@jakarta.annotation.Nullable Long verifyMethod) {
        this.verifyMethod = verifyMethod;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FetchAddressVerificationListResponseInnerAddressQuestionnaire
                fetchAddressVerificationListResponseInnerAddressQuestionnaire =
                        (FetchAddressVerificationListResponseInnerAddressQuestionnaire) o;
        return Objects.equals(
                        this.sendTo,
                        fetchAddressVerificationListResponseInnerAddressQuestionnaire.sendTo)
                && Objects.equals(
                        this.satoshiToken,
                        fetchAddressVerificationListResponseInnerAddressQuestionnaire.satoshiToken)
                && Objects.equals(
                        this.isAddressOwner,
                        fetchAddressVerificationListResponseInnerAddressQuestionnaire
                                .isAddressOwner)
                && Objects.equals(
                        this.verifyMethod,
                        fetchAddressVerificationListResponseInnerAddressQuestionnaire.verifyMethod);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sendTo, satoshiToken, isAddressOwner, verifyMethod);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FetchAddressVerificationListResponseInnerAddressQuestionnaire {\n");
        sb.append("		sendTo: ").append(toIndentedString(sendTo)).append("\n");
        sb.append("		satoshiToken: ").append(toIndentedString(satoshiToken)).append("\n");
        sb.append("		isAddressOwner: ").append(toIndentedString(isAddressOwner)).append("\n");
        sb.append("		verifyMethod: ").append(toIndentedString(verifyMethod)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object sendToValue = getSendTo();
        String sendToValueAsString = "";
        sendToValueAsString = sendToValue.toString();
        sb.append("sendTo=").append(urlEncode(sendToValueAsString)).append("");
        Object satoshiTokenValue = getSatoshiToken();
        String satoshiTokenValueAsString = "";
        satoshiTokenValueAsString = satoshiTokenValue.toString();
        sb.append("satoshiToken=").append(urlEncode(satoshiTokenValueAsString)).append("");
        Object isAddressOwnerValue = getIsAddressOwner();
        String isAddressOwnerValueAsString = "";
        isAddressOwnerValueAsString = isAddressOwnerValue.toString();
        sb.append("isAddressOwner=").append(urlEncode(isAddressOwnerValueAsString)).append("");
        Object verifyMethodValue = getVerifyMethod();
        String verifyMethodValueAsString = "";
        verifyMethodValueAsString = verifyMethodValue.toString();
        sb.append("verifyMethod=").append(urlEncode(verifyMethodValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sendTo");
        openapiFields.add("satoshiToken");
        openapiFields.add("isAddressOwner");
        openapiFields.add("verifyMethod");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FetchAddressVerificationListResponseInnerAddressQuestionnaire
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FetchAddressVerificationListResponseInnerAddressQuestionnaire.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " FetchAddressVerificationListResponseInnerAddressQuestionnaire"
                                    + " is not found in the empty JSON string",
                                FetchAddressVerificationListResponseInnerAddressQuestionnaire
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FetchAddressVerificationListResponseInnerAddressQuestionnaire.openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `FetchAddressVerificationListResponseInnerAddressQuestionnaire`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("satoshiToken") != null && !jsonObj.get("satoshiToken").isJsonNull())
                && !jsonObj.get("satoshiToken").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `satoshiToken` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("satoshiToken").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FetchAddressVerificationListResponseInnerAddressQuestionnaire.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'FetchAddressVerificationListResponseInnerAddressQuestionnaire' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FetchAddressVerificationListResponseInnerAddressQuestionnaire>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            FetchAddressVerificationListResponseInnerAddressQuestionnaire
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            FetchAddressVerificationListResponseInnerAddressQuestionnaire>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                FetchAddressVerificationListResponseInnerAddressQuestionnaire value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FetchAddressVerificationListResponseInnerAddressQuestionnaire read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FetchAddressVerificationListResponseInnerAddressQuestionnaire given an
     * JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FetchAddressVerificationListResponseInnerAddressQuestionnaire
     * @throws IOException if the JSON string is invalid with respect to
     *     FetchAddressVerificationListResponseInnerAddressQuestionnaire
     */
    public static FetchAddressVerificationListResponseInnerAddressQuestionnaire fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        FetchAddressVerificationListResponseInnerAddressQuestionnaire.class);
    }

    /**
     * Convert an instance of FetchAddressVerificationListResponseInnerAddressQuestionnaire to an
     * JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** DepositHistoryV2ResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class DepositHistoryV2ResponseInner {
    public static final String SERIALIZED_NAME_DEPOSIT_ID = "depositId";

    @SerializedName(SERIALIZED_NAME_DEPOSIT_ID)
    @jakarta.annotation.Nullable
    private String depositId;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_NETWORK = "network";

    @SerializedName(SERIALIZED_NAME_NETWORK)
    @jakarta.annotation.Nullable
    private String network;

    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_DEPOSIT_STATUS = "depositStatus";

    @SerializedName(SERIALIZED_NAME_DEPOSIT_STATUS)
    @jakarta.annotation.Nullable
    private Long depositStatus;

    public static final String SERIALIZED_NAME_TRAVEL_RULE_REQ_STATUS = "travelRuleReqStatus";

    @SerializedName(SERIALIZED_NAME_TRAVEL_RULE_REQ_STATUS)
    @jakarta.annotation.Nullable
    private Long travelRuleReqStatus;

    public static final String SERIALIZED_NAME_ADDRESS = "address";

    @SerializedName(SERIALIZED_NAME_ADDRESS)
    @jakarta.annotation.Nullable
    private String address;

    public static final String SERIALIZED_NAME_ADDRESS_TAG = "addressTag";

    @SerializedName(SERIALIZED_NAME_ADDRESS_TAG)
    @jakarta.annotation.Nullable
    private String addressTag;

    public static final String SERIALIZED_NAME_TX_ID = "txId";

    @SerializedName(SERIALIZED_NAME_TX_ID)
    @jakarta.annotation.Nullable
    private String txId;

    public static final String SERIALIZED_NAME_TRANSFER_TYPE = "transferType";

    @SerializedName(SERIALIZED_NAME_TRANSFER_TYPE)
    @jakarta.annotation.Nullable
    private Long transferType;

    public static final String SERIALIZED_NAME_CONFIRM_TIMES = "confirmTimes";

    @SerializedName(SERIALIZED_NAME_CONFIRM_TIMES)
    @jakarta.annotation.Nullable
    private String confirmTimes;

    public static final String SERIALIZED_NAME_REQUIRE_QUESTIONNAIRE = "requireQuestionnaire";

    @SerializedName(SERIALIZED_NAME_REQUIRE_QUESTIONNAIRE)
    @jakarta.annotation.Nullable
    private Boolean requireQuestionnaire;

    public static final String SERIALIZED_NAME_QUESTIONNAIRE = "questionnaire";

    @SerializedName(SERIALIZED_NAME_QUESTIONNAIRE)
    @jakarta.annotation.Nullable
    private DepositHistoryV2ResponseInnerQuestionnaire questionnaire;

    public static final String SERIALIZED_NAME_INSERT_TIME = "insertTime";

    @SerializedName(SERIALIZED_NAME_INSERT_TIME)
    @jakarta.annotation.Nullable
    private Long insertTime;

    public DepositHistoryV2ResponseInner() {}

    public DepositHistoryV2ResponseInner depositId(@jakarta.annotation.Nullable String depositId) {
        this.depositId = depositId;
        return this;
    }

    /**
     * Get depositId
     *
     * @return depositId
     */
    @jakarta.annotation.Nullable
    public String getDepositId() {
        return depositId;
    }

    public void setDepositId(@jakarta.annotation.Nullable String depositId) {
        this.depositId = depositId;
    }

    public DepositHistoryV2ResponseInner amount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public DepositHistoryV2ResponseInner network(@jakarta.annotation.Nullable String network) {
        this.network = network;
        return this;
    }

    /**
     * Get network
     *
     * @return network
     */
    @jakarta.annotation.Nullable
    public String getNetwork() {
        return network;
    }

    public void setNetwork(@jakarta.annotation.Nullable String network) {
        this.network = network;
    }

    public DepositHistoryV2ResponseInner coin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public DepositHistoryV2ResponseInner depositStatus(
            @jakarta.annotation.Nullable Long depositStatus) {
        this.depositStatus = depositStatus;
        return this;
    }

    /**
     * Get depositStatus
     *
     * @return depositStatus
     */
    @jakarta.annotation.Nullable
    public Long getDepositStatus() {
        return depositStatus;
    }

    public void setDepositStatus(@jakarta.annotation.Nullable Long depositStatus) {
        this.depositStatus = depositStatus;
    }

    public DepositHistoryV2ResponseInner travelRuleReqStatus(
            @jakarta.annotation.Nullable Long travelRuleReqStatus) {
        this.travelRuleReqStatus = travelRuleReqStatus;
        return this;
    }

    /**
     * Get travelRuleReqStatus
     *
     * @return travelRuleReqStatus
     */
    @jakarta.annotation.Nullable
    public Long getTravelRuleReqStatus() {
        return travelRuleReqStatus;
    }

    public void setTravelRuleReqStatus(@jakarta.annotation.Nullable Long travelRuleReqStatus) {
        this.travelRuleReqStatus = travelRuleReqStatus;
    }

    public DepositHistoryV2ResponseInner address(@jakarta.annotation.Nullable String address) {
        this.address = address;
        return this;
    }

    /**
     * Get address
     *
     * @return address
     */
    @jakarta.annotation.Nullable
    public String getAddress() {
        return address;
    }

    public void setAddress(@jakarta.annotation.Nullable String address) {
        this.address = address;
    }

    public DepositHistoryV2ResponseInner addressTag(
            @jakarta.annotation.Nullable String addressTag) {
        this.addressTag = addressTag;
        return this;
    }

    /**
     * Get addressTag
     *
     * @return addressTag
     */
    @jakarta.annotation.Nullable
    public String getAddressTag() {
        return addressTag;
    }

    public void setAddressTag(@jakarta.annotation.Nullable String addressTag) {
        this.addressTag = addressTag;
    }

    public DepositHistoryV2ResponseInner txId(@jakarta.annotation.Nullable String txId) {
        this.txId = txId;
        return this;
    }

    /**
     * Get txId
     *
     * @return txId
     */
    @jakarta.annotation.Nullable
    public String getTxId() {
        return txId;
    }

    public void setTxId(@jakarta.annotation.Nullable String txId) {
        this.txId = txId;
    }

    public DepositHistoryV2ResponseInner transferType(
            @jakarta.annotation.Nullable Long transferType) {
        this.transferType = transferType;
        return this;
    }

    /**
     * Get transferType
     *
     * @return transferType
     */
    @jakarta.annotation.Nullable
    public Long getTransferType() {
        return transferType;
    }

    public void setTransferType(@jakarta.annotation.Nullable Long transferType) {
        this.transferType = transferType;
    }

    public DepositHistoryV2ResponseInner confirmTimes(
            @jakarta.annotation.Nullable String confirmTimes) {
        this.confirmTimes = confirmTimes;
        return this;
    }

    /**
     * Get confirmTimes
     *
     * @return confirmTimes
     */
    @jakarta.annotation.Nullable
    public String getConfirmTimes() {
        return confirmTimes;
    }

    public void setConfirmTimes(@jakarta.annotation.Nullable String confirmTimes) {
        this.confirmTimes = confirmTimes;
    }

    public DepositHistoryV2ResponseInner requireQuestionnaire(
            @jakarta.annotation.Nullable Boolean requireQuestionnaire) {
        this.requireQuestionnaire = requireQuestionnaire;
        return this;
    }

    /**
     * Get requireQuestionnaire
     *
     * @return requireQuestionnaire
     */
    @jakarta.annotation.Nullable
    public Boolean getRequireQuestionnaire() {
        return requireQuestionnaire;
    }

    public void setRequireQuestionnaire(@jakarta.annotation.Nullable Boolean requireQuestionnaire) {
        this.requireQuestionnaire = requireQuestionnaire;
    }

    public DepositHistoryV2ResponseInner questionnaire(
            @jakarta.annotation.Nullable DepositHistoryV2ResponseInnerQuestionnaire questionnaire) {
        this.questionnaire = questionnaire;
        return this;
    }

    /**
     * Get questionnaire
     *
     * @return questionnaire
     */
    @jakarta.annotation.Nullable
    @Valid
    public DepositHistoryV2ResponseInnerQuestionnaire getQuestionnaire() {
        return questionnaire;
    }

    public void setQuestionnaire(
            @jakarta.annotation.Nullable DepositHistoryV2ResponseInnerQuestionnaire questionnaire) {
        this.questionnaire = questionnaire;
    }

    public DepositHistoryV2ResponseInner insertTime(@jakarta.annotation.Nullable Long insertTime) {
        this.insertTime = insertTime;
        return this;
    }

    /**
     * Get insertTime
     *
     * @return insertTime
     */
    @jakarta.annotation.Nullable
    public Long getInsertTime() {
        return insertTime;
    }

    public void setInsertTime(@jakarta.annotation.Nullable Long insertTime) {
        this.insertTime = insertTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DepositHistoryV2ResponseInner depositHistoryV2ResponseInner =
                (DepositHistoryV2ResponseInner) o;
        return Objects.equals(this.depositId, depositHistoryV2ResponseInner.depositId)
                && Objects.equals(this.amount, depositHistoryV2ResponseInner.amount)
                && Objects.equals(this.network, depositHistoryV2ResponseInner.network)
                && Objects.equals(this.coin, depositHistoryV2ResponseInner.coin)
                && Objects.equals(this.depositStatus, depositHistoryV2ResponseInner.depositStatus)
                && Objects.equals(
                        this.travelRuleReqStatus, depositHistoryV2ResponseInner.travelRuleReqStatus)
                && Objects.equals(this.address, depositHistoryV2ResponseInner.address)
                && Objects.equals(this.addressTag, depositHistoryV2ResponseInner.addressTag)
                && Objects.equals(this.txId, depositHistoryV2ResponseInner.txId)
                && Objects.equals(this.transferType, depositHistoryV2ResponseInner.transferType)
                && Objects.equals(this.confirmTimes, depositHistoryV2ResponseInner.confirmTimes)
                && Objects.equals(
                        this.requireQuestionnaire,
                        depositHistoryV2ResponseInner.requireQuestionnaire)
                && Objects.equals(this.questionnaire, depositHistoryV2ResponseInner.questionnaire)
                && Objects.equals(this.insertTime, depositHistoryV2ResponseInner.insertTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                depositId,
                amount,
                network,
                coin,
                depositStatus,
                travelRuleReqStatus,
                address,
                addressTag,
                txId,
                transferType,
                confirmTimes,
                requireQuestionnaire,
                questionnaire,
                insertTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DepositHistoryV2ResponseInner {\n");
        sb.append("		depositId: ").append(toIndentedString(depositId)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		network: ").append(toIndentedString(network)).append("\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		depositStatus: ").append(toIndentedString(depositStatus)).append("\n");
        sb.append("		travelRuleReqStatus: ")
                .append(toIndentedString(travelRuleReqStatus))
                .append("\n");
        sb.append("		address: ").append(toIndentedString(address)).append("\n");
        sb.append("		addressTag: ").append(toIndentedString(addressTag)).append("\n");
        sb.append("		txId: ").append(toIndentedString(txId)).append("\n");
        sb.append("		transferType: ").append(toIndentedString(transferType)).append("\n");
        sb.append("		confirmTimes: ").append(toIndentedString(confirmTimes)).append("\n");
        sb.append("		requireQuestionnaire: ")
                .append(toIndentedString(requireQuestionnaire))
                .append("\n");
        sb.append("		questionnaire: ").append(toIndentedString(questionnaire)).append("\n");
        sb.append("		insertTime: ").append(toIndentedString(insertTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object depositIdValue = getDepositId();
        String depositIdValueAsString = "";
        depositIdValueAsString = depositIdValue.toString();
        sb.append("depositId=").append(urlEncode(depositIdValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object networkValue = getNetwork();
        String networkValueAsString = "";
        networkValueAsString = networkValue.toString();
        sb.append("network=").append(urlEncode(networkValueAsString)).append("");
        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object depositStatusValue = getDepositStatus();
        String depositStatusValueAsString = "";
        depositStatusValueAsString = depositStatusValue.toString();
        sb.append("depositStatus=").append(urlEncode(depositStatusValueAsString)).append("");
        Object travelRuleReqStatusValue = getTravelRuleReqStatus();
        String travelRuleReqStatusValueAsString = "";
        travelRuleReqStatusValueAsString = travelRuleReqStatusValue.toString();
        sb.append("travelRuleReqStatus=")
                .append(urlEncode(travelRuleReqStatusValueAsString))
                .append("");
        Object addressValue = getAddress();
        String addressValueAsString = "";
        addressValueAsString = addressValue.toString();
        sb.append("address=").append(urlEncode(addressValueAsString)).append("");
        Object addressTagValue = getAddressTag();
        String addressTagValueAsString = "";
        addressTagValueAsString = addressTagValue.toString();
        sb.append("addressTag=").append(urlEncode(addressTagValueAsString)).append("");
        Object txIdValue = getTxId();
        String txIdValueAsString = "";
        txIdValueAsString = txIdValue.toString();
        sb.append("txId=").append(urlEncode(txIdValueAsString)).append("");
        Object transferTypeValue = getTransferType();
        String transferTypeValueAsString = "";
        transferTypeValueAsString = transferTypeValue.toString();
        sb.append("transferType=").append(urlEncode(transferTypeValueAsString)).append("");
        Object confirmTimesValue = getConfirmTimes();
        String confirmTimesValueAsString = "";
        confirmTimesValueAsString = confirmTimesValue.toString();
        sb.append("confirmTimes=").append(urlEncode(confirmTimesValueAsString)).append("");
        Object requireQuestionnaireValue = getRequireQuestionnaire();
        String requireQuestionnaireValueAsString = "";
        requireQuestionnaireValueAsString = requireQuestionnaireValue.toString();
        sb.append("requireQuestionnaire=")
                .append(urlEncode(requireQuestionnaireValueAsString))
                .append("");
        Object questionnaireValue = getQuestionnaire();
        String questionnaireValueAsString = "";
        questionnaireValueAsString = questionnaireValue.toString();
        sb.append("questionnaire=").append(urlEncode(questionnaireValueAsString)).append("");
        Object insertTimeValue = getInsertTime();
        String insertTimeValueAsString = "";
        insertTimeValueAsString = insertTimeValue.toString();
        sb.append("insertTime=").append(urlEncode(insertTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("depositId");
        openapiFields.add("amount");
        openapiFields.add("network");
        openapiFields.add("coin");
        openapiFields.add("depositStatus");
        openapiFields.add("travelRuleReqStatus");
        openapiFields.add("address");
        openapiFields.add("addressTag");
        openapiFields.add("txId");
        openapiFields.add("transferType");
        openapiFields.add("confirmTimes");
        openapiFields.add("requireQuestionnaire");
        openapiFields.add("questionnaire");
        openapiFields.add("insertTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     DepositHistoryV2ResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DepositHistoryV2ResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DepositHistoryV2ResponseInner is not"
                                        + " found in the empty JSON string",
                                DepositHistoryV2ResponseInner.openapiRequiredFields.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("depositId") != null && !jsonObj.get("depositId").isJsonNull())
                && !jsonObj.get("depositId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `depositId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("depositId").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull())
                && !jsonObj.get("network").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `network` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("network").toString()));
        }
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull())
                && !jsonObj.get("address").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `address` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("address").toString()));
        }
        if ((jsonObj.get("addressTag") != null && !jsonObj.get("addressTag").isJsonNull())
                && !jsonObj.get("addressTag").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `addressTag` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("addressTag").toString()));
        }
        if ((jsonObj.get("txId") != null && !jsonObj.get("txId").isJsonNull())
                && !jsonObj.get("txId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `txId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("txId").toString()));
        }
        if ((jsonObj.get("confirmTimes") != null && !jsonObj.get("confirmTimes").isJsonNull())
                && !jsonObj.get("confirmTimes").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `confirmTimes` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("confirmTimes").toString()));
        }
        // validate the optional field `questionnaire`
        if (jsonObj.get("questionnaire") != null && !jsonObj.get("questionnaire").isJsonNull()) {
            DepositHistoryV2ResponseInnerQuestionnaire.validateJsonElement(
                    jsonObj.get("questionnaire"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DepositHistoryV2ResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DepositHistoryV2ResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DepositHistoryV2ResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(DepositHistoryV2ResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DepositHistoryV2ResponseInner>() {
                        @Override
                        public void write(JsonWriter out, DepositHistoryV2ResponseInner value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DepositHistoryV2ResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DepositHistoryV2ResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DepositHistoryV2ResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     DepositHistoryV2ResponseInner
     */
    public static DepositHistoryV2ResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DepositHistoryV2ResponseInner.class);
    }

    /**
     * Convert an instance of DepositHistoryV2ResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
